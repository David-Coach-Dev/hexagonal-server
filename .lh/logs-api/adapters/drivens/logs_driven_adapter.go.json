{
    "sourceFile": "logs-api/adapters/drivens/logs_driven_adapter.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1719196769413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719201970276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +0,0 @@\n-package drivens\r\n-\r\n-import (\r\n-    \"encoding/json\"\r\n-    \"fmt\"\r\n-    \"logs-api/models\"\r\n-    \"os\"\r\n-    \"time\"\r\n-)\r\n-\r\n-type LogsAdapter struct{}\r\n-\r\n-func NewLogsAdapter() *LogsAdapter {\r\n-    return &LogsAdapter{}\r\n-}\r\n-\r\n-func (la *LogsAdapter) SaveErrorLog(log models.ErrorLog) error {\r\n-    log.Fecha = time.Now().Format(\"2006-01-02\")\r\n-    log.Hora = time.Now().Format(\"15_04_05\")\r\n-    filename := fmt.Sprintf(\"logs/log-%s-%s.json\", log.Fecha, log.Hora)\r\n-\r\n-    if _, err := os.Stat(\"logs\"); os.IsNotExist(err) {\r\n-        err := os.Mkdir(\"logs\", os.ModePerm)\r\n-        if err != nil {\r\n-            return fmt.Errorf(\"failed to create logs directory: %v\", err)\r\n-        }\r\n-    }\r\n-\r\n-    file, err := os.Create(filename)\r\n-    if err != nil {\r\n-        return err\r\n-    }\r\n-    defer file.Close()\r\n-\r\n-    encoder := json.NewEncoder(file)\r\n-    err = encoder.Encode(log)\r\n-    if err != nil {\r\n-        return err\r\n-    }\r\n-\r\n-    fmt.Println(\"Archivo de log ha sido generado y guardado:\", filename)\r\n-    return nil\r\n-}\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719202005164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +0,0 @@\n-\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719202010273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+package drivers\r\n+\r\n+import (\r\n+    \"context\"\r\n+    \"logs-api/ports/drivens\"\r\n+    \"logs-api/models\"\r\n+)\r\n+\r\n+type LogsProxyAdapter struct {\r\n+    drivenAdapter drivens.LogsDrivenPort\r\n+}\r\n+\r\n+func NewLogsProxyAdapter(drivenAdapter drivens.LogsDrivenPort) *LogsProxyAdapter {\r\n+    return &LogsProxyAdapter{\r\n+        drivenAdapter: drivenAdapter,\r\n+    }\r\n+}\r\n+\r\n+func (lpa *LogsProxyAdapter) SaveLog(ctx context.Context, log models.ErrorLog) error {\r\n+    return lpa.drivenAdapter.SaveErrorLog(ctx, log)\r\n+}\r\n"
                },
                {
                    "date": 1719207222559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,11 @@\n package drivens\r\n \r\n import (\r\n+    \"context\"\r\n     \"encoding/json\"\r\n     \"fmt\"\r\n+    \"io/ioutil\"\r\n     \"logs-api/models\"\r\n     \"os\"\r\n     \"time\"\r\n )\r\n@@ -13,9 +15,9 @@\n func NewLogsAdapter() *LogsAdapter {\r\n     return &LogsAdapter{}\r\n }\r\n \r\n-func (la *LogsAdapter) SaveErrorLog(log models.ErrorLog) error {\r\n+func (la *LogsAdapter) SaveErrorLog(ctx context.Context, log models.ErrorLog) error {\r\n     log.Fecha = time.Now().Format(\"2006-01-02\")\r\n     log.Hora = time.Now().Format(\"15_04_05\")\r\n     filename := fmt.Sprintf(\"logs/log-%s-%s.json\", log.Fecha, log.Hora)\r\n \r\n@@ -37,7 +39,61 @@\n     if err != nil {\r\n         return err\r\n     }\r\n \r\n-    fmt.Println(\"Archivo de log ha sido generado y guardado:\", filename)\r\n+    fmt.Println(\"Archivo de logs ha sido generado y guardado:\", filename)\r\n     return nil\r\n }\r\n+\r\n+func (la *LogsAdapter) ListLogs(ctx context.Context) ([]string, error) {\r\n+    files, err := ioutil.ReadDir(\"logs\")\r\n+    if err != nil {\r\n+        return nil, err\r\n+    }\r\n+\r\n+    var logFiles []string\r\n+    for _, file := range files {\r\n+        logFiles = append(logFiles, file.Name())\r\n+    }\r\n+    return logFiles, nil\r\n+}\r\n+\r\n+func (la *LogsAdapter) ReadLog(ctx context.Context, filename string) (*models.ErrorLog, error) {\r\n+    filePath := fmt.Sprintf(\"logs/%s\", filename)\r\n+    file, err := os.Open(filePath)\r\n+    if err != nil {\r\n+        return nil, err\r\n+    }\r\n+    defer file.Close()\r\n+\r\n+    var log models.ErrorLog\r\n+    decoder := json.NewDecoder(file)\r\n+    if err := decoder.Decode(&log); err != nil {\r\n+        return nil, err\r\n+    }\r\n+    return &log, nil\r\n+}\r\n+\r\n+func (la *LogsAdapter) DeleteLog(ctx context.Context, filename string) error {\r\n+    filePath := fmt.Sprintf(\"logs/%s\", filename)\r\n+    if err := os.Remove(filePath); err != nil {\r\n+        return err\r\n+    }\r\n+    fmt.Println(\"Archivo de log ha sido eliminado:\", filename)\r\n+    return nil\r\n+}\r\n+\r\n+func (la *LogsAdapter) DeleteAllLogs(ctx context.Context) error {\r\n+    files, err := ioutil.ReadDir(\"logs\")\r\n+    if err != nil {\r\n+        return err\r\n+    }\r\n+\r\n+    for _, file := range files {\r\n+        filePath := fmt.Sprintf(\"logs/%s\", file.Name())\r\n+        if err := os.Remove(filePath); err != nil {\r\n+            return err\r\n+        }\r\n+    }\r\n+    fmt.Println(\"Todos los archivos de log han sido eliminados\")\r\n+    return nil\r\n+}\r\n"
                },
                {
                    "date": 1719214397735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+package drivens\r\n+\r\n+import (\r\n+    \"context\"\r\n+    \"encoding/json\"\r\n+    \"errors\"\r\n+    \"io/ioutil\"\r\n+    \"logs-api/models\"\r\n+    \"os\"\r\n+    \"path/filepath\"\r\n+    \"time\"\r\n+)\r\n+\r\n+type LogsAdapter struct {\r\n+    logDir string\r\n+}\r\n+\r\n+func NewLogsAdapter() *LogsAdapter {\r\n+    logDir := \"logs\"\r\n+    if _, err := os.Stat(logDir); os.IsNotExist(err) {\r\n+        os.Mkdir(logDir, os.ModePerm)\r\n+    }\r\n+    return &LogsAdapter{logDir: logDir}\r\n+}\r\n+\r\n+func (la *LogsAdapter) SaveLog(ctx context.Context, log models.ErrorLog) error {\r\n+    filename := filepath.Join(la.logDir, \"log-\"+time.Now().Format(\"2006-01-02-15-04-05\")+\".json\")\r\n+    file, err := os.Create(filename)\r\n+    if err != nil {\r\n+        return err\r\n+    }\r\n+    defer file.Close()\r\n+\r\n+    encoder := json.NewEncoder(file)\r\n+    if err := encoder.Encode(log); err != nil {\r\n+        return err\r\n+    }\r\n+\r\n+    return nil\r\n+}\r\n+\r\n+func (la *LogsAdapter) ListLogs(ctx context.Context) ([]string, error) {\r\n+    files, err := ioutil.ReadDir(la.logDir)\r\n+    if err != nil {\r\n+        return nil, err\r\n+    }\r\n+\r\n+    var filenames []string\r\n+    for _, file := range files {\r\n+        if !file.IsDir() {\r\n+            filenames = append(filenames, file.Name())\r\n+        }\r\n+    }\r\n+    return filenames, nil\r\n+}\r\n+\r\n+func (la *LogsAdapter) ReadLog(ctx context.Context, filename string) (*models.ErrorLog, error) {\r\n+    filepath := filepath.Join(la.logDir, filename)\r\n+    file, err := os.Open(filepath)\r\n+    if err != nil {\r\n+        return nil, err\r\n+    }\r\n+    defer file.Close()\r\n+\r\n+    var log models.ErrorLog\r\n+    decoder := json.NewDecoder(file)\r\n+    if err := decoder.Decode(&log); err != nil {\r\n+        return nil, err\r\n+    }\r\n+\r\n+    return &log, nil\r\n+}\r\n+\r\n+func (la *LogsAdapter) DeleteLog(ctx context.Context, filename string) error {\r\n+    filepath := filepath.Join(la.logDir, filename)\r\n+    if _, err := os.Stat(filepath); os.IsNotExist(err) {\r\n+        return errors.New(\"file not found\")\r\n+    }\r\n+\r\n+    return os.Remove(filepath)\r\n+}\r\n+\r\n+func (la *LogsAdapter) DeleteAllLogs(ctx context.Context) error {\r\n+    files, err := ioutil.ReadDir(la.logDir)\r\n+    if err != nil {\r\n+        return err\r\n+    }\r\n+\r\n+    for _, file := range files {\r\n+        if !file.IsDir() {\r\n+            filepath := filepath.Join(la.logDir, file.Name())\r\n+            if err := os.Remove(filepath); err != nil {\r\n+                return err\r\n+            }\r\n+        }\r\n+    }\r\n+    return nil\r\n+}\r\n"
                }
            ],
            "date": 1719196769413,
            "name": "Commit-0",
            "content": "package drivens\r\n\r\nimport (\r\n    \"encoding/json\"\r\n    \"fmt\"\r\n    \"logs-api/models\"\r\n    \"os\"\r\n    \"time\"\r\n)\r\n\r\ntype LogsAdapter struct{}\r\n\r\nfunc NewLogsAdapter() *LogsAdapter {\r\n    return &LogsAdapter{}\r\n}\r\n\r\nfunc (la *LogsAdapter) SaveErrorLog(log models.ErrorLog) error {\r\n    log.Fecha = time.Now().Format(\"2006-01-02\")\r\n    log.Hora = time.Now().Format(\"15_04_05\")\r\n    filename := fmt.Sprintf(\"logs/log-%s-%s.json\", log.Fecha, log.Hora)\r\n\r\n    if _, err := os.Stat(\"logs\"); os.IsNotExist(err) {\r\n        err := os.Mkdir(\"logs\", os.ModePerm)\r\n        if err != nil {\r\n            return fmt.Errorf(\"failed to create logs directory: %v\", err)\r\n        }\r\n    }\r\n\r\n    file, err := os.Create(filename)\r\n    if err != nil {\r\n        return err\r\n    }\r\n    defer file.Close()\r\n\r\n    encoder := json.NewEncoder(file)\r\n    err = encoder.Encode(log)\r\n    if err != nil {\r\n        return err\r\n    }\r\n\r\n    fmt.Println(\"Archivo de log ha sido generado y guardado:\", filename)\r\n    return nil\r\n}\r\n"
        }
    ]
}