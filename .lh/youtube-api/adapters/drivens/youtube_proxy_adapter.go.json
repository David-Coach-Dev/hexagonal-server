{
    "sourceFile": "youtube-api/adapters/drivens/youtube_proxy_adapter.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1719192397691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1719192397691,
            "name": "Commit-0",
            "content": "package drivers\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"google.golang.org/api/option\"\r\n    \"google.golang.org/api/youtube/v3\"\r\n    \"models\"\r\n    \"os\"\r\n    \"strings\"\r\n)\r\n\r\ntype YouTubeAdapter struct {\r\n    service *youtube.Service\r\n}\r\n\r\nfunc NewYouTubeAdapter() (*YouTubeAdapter, error) {\r\n    apiKey := os.Getenv(\"YOUTUBE_API_KEY\")\r\n    service, err := youtube.NewService(context.Background(), option.WithAPIKey(apiKey))\r\n    if err != nil {\r\n        return nil, err\r\n    }\r\n    return &YouTubeAdapter{service: service}, nil\r\n}\r\n\r\nfunc (yt *YouTubeAdapter) getChannelIDs() []string {\r\n    channelIDs := os.Getenv(\"CHANNEL_IDS\")\r\n    if channelIDs == \"\" {\r\n        return nil\r\n    }\r\n    return strings.Split(channelIDs, \",\")\r\n}\r\n\r\nfunc (yt *YouTubeAdapter) GetSearching(ctx context.Context, searching string) ([]models.DataYT, error) {\r\n    channelIDs := yt.getChannelIDs()\r\n    var results []models.DataYT\r\n    for _, channelID := range channelIDs {\r\n        call := yt.service.Search.List([]string{\"id\", \"snippet\"}).Q(searching).ChannelId(channelID).MaxResults(5)\r\n        response, err := call.Do()\r\n        if err != nil {\r\n            return nil, err\r\n        }\r\n        for _, item := range response.Items {\r\n            results = append(results, models.DataYT{\r\n                ID:          item.Id.VideoId,\r\n                Title:       item.Snippet.Title,\r\n                Description: item.Snippet.Description,\r\n                URL:         fmt.Sprintf(\"https://www.youtube.com/watch?v=%s\", item.Id.VideoId),\r\n            })\r\n        }\r\n    }\r\n    return results, nil\r\n}\r\n\r\nfunc (yt *YouTubeAdapter) GetRandomVideo(ctx context.Context) (models.DataYT, error) {\r\n    channelIDs := yt.getChannelIDs()\r\n    var result models.DataYT\r\n    for _, channelID := range channelIDs {\r\n        call := yt.service.Search.List([]string{\"id\", \"snippet\"}).ChannelId(channelID).Type(\"video\").Order(\"viewCount\").MaxResults(1)\r\n        response, err := call.Do()\r\n        if err != nil {\r\n            return models.DataYT{}, err\r\n        }\r\n        if len(response.Items) > 0 {\r\n            item := response.Items[0]\r\n            result = models.DataYT{\r\n                ID:          item.Id.VideoId,\r\n                Title:       item.Snippet.Title,\r\n                Description: item.Snippet.Description,\r\n                URL:         fmt.Sprintf(\"https://www.youtube.com/watch?v=%s\", item.Id.VideoId),\r\n            }\r\n            break\r\n        }\r\n    }\r\n    return result, nil\r\n}\r\n\r\nfunc (yt *YouTubeAdapter) GetSearchPlaylists(ctx context.Context) ([]models.DataYT, error) {\r\n    channelIDs := yt.getChannelIDs()\r\n    var results []models.DataYT\r\n    for _, channelID := range channelIDs {\r\n        call := yt.service.Playlists.List([]string{\"id\", \"snippet\"}).ChannelId(channelID).MaxResults(5)\r\n        response, err := call.Do()\r\n        if err != nil {\r\n            return nil, err\r\n        }\r\n        for _, item := range response.Items {\r\n            results = append(results, models.DataYT{\r\n                ID:          item.Id,\r\n                Title:       item.Snippet.Title,\r\n                Description: item.Snippet.Description,\r\n                URL:         fmt.Sprintf(\"https://www.youtube.com/playlist?list=%s\", item.Id),\r\n            })\r\n        }\r\n    }\r\n    return results, nil\r\n}\r\n\r\nfunc (yt *YouTubeAdapter) GetSearchPlaylistsItems(ctx context.Context, playlistID string) ([]models.DataYT, error) {\r\n    call := yt.service.PlaylistItems.List([]string{\"id\", \"snippet\"}).PlaylistId(playlistID).MaxResults(5)\r\n    response, err := call.Do()\r\n    if err != nil {\r\n        return nil, err\r\n    }\r\n    var results []models.DataYT\r\n    for _, item := range response.Items {\r\n        results = append(results, models.DataYT{\r\n            ID:          item.Id,\r\n            Title:       item.Snippet.Title,\r\n            Description: item.Snippet.Description,\r\n            URL:         fmt.Sprintf(\"https://www.youtube.com/watch?v=%s\", item.Snippet.ResourceId.VideoId),\r\n        })\r\n    }\r\n    return results, nil\r\n}\r\n\r\nfunc (yt *YouTubeAdapter) GetCheckLive(ctx context.Context) (models.Live, error) {\r\n    channelIDs := yt.getChannelIDs()\r\n    var result models.Live\r\n    for _, channelID := range channelIDs {\r\n        call := yt.service.LiveBroadcasts.List([]string{\"id\", \"snippet\", \"contentDetails\", \"status\"}).BroadcastStatus(\"active\").MaxResults(1).BroadcastType(\"all\")\r\n        response, err := call.Do()\r\n        if err != nil {\r\n            return models.Live{}, err\r\n        }\r\n        for _, item := range response.Items {\r\n            if item.Snippet.ChannelId == channelID {\r\n                result = models.Live{\r\n                    ID:    item.Id,\r\n                    Title: item.Snippet.Title,\r\n                    URL:   fmt.Sprintf(\"https://www.youtube.com/watch?v=%s\", item.Id),\r\n                    Live:  true,\r\n                }\r\n                break\r\n            }\r\n        }\r\n        if result.Live {\r\n            break\r\n        }\r\n    }\r\n    if !result.Live {\r\n        result.Live = false\r\n    }\r\n    return result, nil\r\n}\r\n"
        }
    ]
}