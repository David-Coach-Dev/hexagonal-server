{
    "sourceFile": "youtube-api/handler/error_handler.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1719192935529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719193153721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,45 +0,0 @@\n-package handler\r\n-\r\n-import (\r\n-    \"encoding/json\"\r\n-    \"fmt\"\r\n-    \"os\"\r\n-    \"time\"\r\n-)\r\n-\r\n-type ErrorLog struct {\r\n-    ID       string `json:\"id\"`\r\n-    Fecha    string `json:\"fecha\"`\r\n-    Hora     string `json:\"hora\"`\r\n-    Endpoint string `json:\"endpoint\"`\r\n-    Usuario  string `json:\"usuario\"`\r\n-    Error    string `json:\"error\"`\r\n-}\r\n-\r\n-func saveErrorLog(log ErrorLog) error {\r\n-    log.Fecha = time.Now().Format(\"2006-01-02\")\r\n-    log.Hora = time.Now().Format(\"15_04_05\")\r\n-    filename := fmt.Sprintf(\"logs/log-%s-%s.json\", log.Fecha, log.Hora)\r\n-\r\n-    if _, err := os.Stat(\"logs\"); os.IsNotExist(err) {\r\n-        err := os.Mkdir(\"logs\", os.ModePerm)\r\n-        if err != nil {\r\n-            return fmt.Errorf(\"failed to create logs directory: %v\", err)\r\n-        }\r\n-    }\r\n-\r\n-    file, err := os.Create(filename)\r\n-    if err != nil {\r\n-        return err\r\n-    }\r\n-    defer file.Close()\r\n-\r\n-    encoder := json.NewEncoder(file)\r\n-    err = encoder.Encode(log)\r\n-    if err != nil {\r\n-        return err\r\n-    }\r\n-\r\n-    fmt.Println(\"Archivo de log ha sido generado y guardado:\", filename)\r\n-    return nil\r\n-}\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719202415808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,32 +14,4 @@\n     Endpoint string `json:\"endpoint\"`\r\n     Usuario  string `json:\"usuario\"`\r\n     Error    string `json:\"error\"`\r\n }\r\n-\r\n-func saveErrorLog(log ErrorLog) error {\r\n-    log.Fecha = time.Now().Format(\"2006-01-02\")\r\n-    log.Hora = time.Now().Format(\"15_04_05\")\r\n-    filename := fmt.Sprintf(\"logs/log-%s-%s.json\", log.Fecha, log.Hora)\r\n-\r\n-    if _, err := os.Stat(\"logs\"); os.IsNotExist(err) {\r\n-        err := os.Mkdir(\"logs\", os.ModePerm)\r\n-        if err != nil {\r\n-            return fmt.Errorf(\"failed to create logs directory: %v\", err)\r\n-        }\r\n-    }\r\n-\r\n-    file, err := os.Create(filename)\r\n-    if err != nil {\r\n-        return err\r\n-    }\r\n-    defer file.Close()\r\n-\r\n-    encoder := json.NewEncoder(file)\r\n-    err = encoder.Encode(log)\r\n-    if err != nil {\r\n-        return err\r\n-    }\r\n-\r\n-    fmt.Println(\"Archivo de log ha sido generado y guardado:\", filename)\r\n-    return nil\r\n-}\r\n"
                },
                {
                    "date": 1719202427914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,45 +1,13 @@\n package handler\r\n \r\n import (\r\n-    \"encoding/json\"\r\n-    \"fmt\"\r\n-    \"os\"\r\n-    \"time\"\r\n+    \"log\"\r\n+    \"net/http\"\r\n+\r\n+    \"github.com/gin-gonic/gin\"\r\n )\r\n \r\n-type ErrorLog struct {\r\n-    ID       string `json:\"id\"`\r\n-    Fecha    string `json:\"fecha\"`\r\n-    Hora     string `json:\"hora\"`\r\n-    Endpoint string `json:\"endpoint\"`\r\n-    Usuario  string `json:\"usuario\"`\r\n-    Error    string `json:\"error\"`\r\n+func HandleError(c *gin.Context, err error) {\r\n+    log.Println(\"Error: \", err)\r\n+    c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\r\n }\r\n-\r\n-func saveErrorLog(log ErrorLog) error {\r\n-    log.Fecha = time.Now().Format(\"2006-01-02\")\r\n-    log.Hora = time.Now().Format(\"15_04_05\")\r\n-    filename := fmt.Sprintf(\"logs/log-%s-%s.json\", log.Fecha, log.Hora)\r\n-\r\n-    if _, err := os.Stat(\"logs\"); os.IsNotExist(err) {\r\n-        err := os.Mkdir(\"logs\", os.ModePerm)\r\n-        if err != nil {\r\n-            return fmt.Errorf(\"failed to create logs directory: %v\", err)\r\n-        }\r\n-    }\r\n-\r\n-    file, err := os.Create(filename)\r\n-    if err != nil {\r\n-        return err\r\n-    }\r\n-    defer file.Close()\r\n-\r\n-    encoder := json.NewEncoder(file)\r\n-    err = encoder.Encode(log)\r\n-    if err != nil {\r\n-        return err\r\n-    }\r\n-\r\n-    fmt.Println(\"Archivo de log ha sido generado y guardado:\", filename)\r\n-    return nil\r\n-}\r\n"
                }
            ],
            "date": 1719192935529,
            "name": "Commit-0",
            "content": "package handler\r\n\r\nimport (\r\n    \"encoding/json\"\r\n    \"fmt\"\r\n    \"os\"\r\n    \"time\"\r\n)\r\n\r\ntype ErrorLog struct {\r\n    ID       string `json:\"id\"`\r\n    Fecha    string `json:\"fecha\"`\r\n    Hora     string `json:\"hora\"`\r\n    Endpoint string `json:\"endpoint\"`\r\n    Usuario  string `json:\"usuario\"`\r\n    Error    string `json:\"error\"`\r\n}\r\n\r\nfunc saveErrorLog(log ErrorLog) error {\r\n    log.Fecha = time.Now().Format(\"2006-01-02\")\r\n    log.Hora = time.Now().Format(\"15_04_05\")\r\n    filename := fmt.Sprintf(\"logs/log-%s-%s.json\", log.Fecha, log.Hora)\r\n\r\n    if _, err := os.Stat(\"logs\"); os.IsNotExist(err) {\r\n        err := os.Mkdir(\"logs\", os.ModePerm)\r\n        if err != nil {\r\n            return fmt.Errorf(\"failed to create logs directory: %v\", err)\r\n        }\r\n    }\r\n\r\n    file, err := os.Create(filename)\r\n    if err != nil {\r\n        return err\r\n    }\r\n    defer file.Close()\r\n\r\n    encoder := json.NewEncoder(file)\r\n    err = encoder.Encode(log)\r\n    if err != nil {\r\n        return err\r\n    }\r\n\r\n    fmt.Println(\"Archivo de log ha sido generado y guardado:\", filename)\r\n    return nil\r\n}\r\n"
        }
    ]
}