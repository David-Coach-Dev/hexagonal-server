{
    "sourceFile": "youtube-api/youtube.domain.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1719192978126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719193162492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,218 +0,0 @@\n-package main\r\n-\r\n-import (\r\n-    \"context\"\r\n-    \"fmt\"\r\n-    \"github.com/gin-gonic/gin\"\r\n-    \"handlers\"\r\n-    \"models\"\r\n-    \"net/http\"\r\n-    \"adapters/drivers\"\r\n-)\r\n-\r\n-var youtubeAdapter, _ = drivers.NewYouTubeAdapter()\r\n-\r\n-func searchYouTube(c *gin.Context) {\r\n-    searching := c.Query(\"search\")\r\n-    if searching == \"\" {\r\n-        err := handlers.saveErrorLog(handlers.ErrorLog{\r\n-            ID:       \"1\",\r\n-            Endpoint: \"/youtube/search\",\r\n-            Usuario:  \"unknown\",\r\n-            Error:    \"search query parameter is required\",\r\n-        })\r\n-        if err != nil {\r\n-            fmt.Println(\"Error al guardar el archivo de log:\", err)\r\n-        }\r\n-        c.JSON(http.StatusBadRequest, gin.H{\"error\": \"search query parameter is required\"})\r\n-        return\r\n-    }\r\n-\r\n-    data, err := youtubeAdapter.GetSearching(c, searching)\r\n-    if err != nil {\r\n-        err = handlers.saveErrorLog(handlers.ErrorLog{\r\n-            ID:       \"1\",\r\n-            Endpoint: \"/youtube/search\",\r\n-            Usuario:  \"unknown\",\r\n-            Error:    err.Error(),\r\n-        })\r\n-        if err != nil {\r\n-            fmt.Println(\"Error al guardar el archivo de log:\", err)\r\n-        }\r\n-        c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\r\n-        return\r\n-    }\r\n-\r\n-    responseData, err := json.Marshal(data)\r\n-    if err != nil {\r\n-        fmt.Println(\"Error al convertir la respuesta a JSON:\", err)\r\n-        responseData = []byte(\"error al convertir la respuesta a JSON\")\r\n-    }\r\n-\r\n-    err = handlers.saveMonitorLog(handlers.MonitorLog{\r\n-        ID:        \"1\",\r\n-        Endpoint:  \"/youtube/search\",\r\n-        Usuario:   \"unknown\",\r\n-        Respuesta: string(responseData),\r\n-    })\r\n-    if err != nil {\r\n-        fmt.Println(\"Error al guardar el archivo de monitorización:\", err)\r\n-    }\r\n-\r\n-    c.JSON(http.StatusOK, data)\r\n-}\r\n-\r\n-func getRandomVideo(c *gin.Context) {\r\n-    video, err := youtubeAdapter.GetRandomVideo(c)\r\n-    if err != nil {\r\n-        err = handlers.saveErrorLog(handlers.ErrorLog{\r\n-            ID:       \"2\",\r\n-            Endpoint: \"/youtube/random\",\r\n-            Usuario:  \"unknown\",\r\n-            Error:    err.Error(),\r\n-        })\r\n-        if err != nil {\r\n-            fmt.Println(\"Error al guardar el archivo de log:\", err)\r\n-        }\r\n-        c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\r\n-        return\r\n-    }\r\n-\r\n-    responseData, err := json.Marshal(video)\r\n-    if err != nil {\r\n-        fmt.Println(\"Error al convertir la respuesta a JSON:\", err)\r\n-        responseData = []byte(\"error al convertir la respuesta a JSON\")\r\n-    }\r\n-\r\n-    err = handlers.saveMonitorLog(handlers.MonitorLog{\r\n-        ID:        \"2\",\r\n-        Endpoint:  \"/youtube/random\",\r\n-        Usuario:   \"unknown\",\r\n-        Respuesta: string(responseData),\r\n-    })\r\n-    if err != nil {\r\n-        fmt.Println(\"Error al guardar el archivo de monitorización:\", err)\r\n-    }\r\n-\r\n-    c.JSON(http.StatusOK, video)\r\n-}\r\n-\r\n-func getPlaylists(c *gin.Context) {\r\n-    playlists, err := youtubeAdapter.GetSearchPlaylists(c)\r\n-    if err != nil {\r\n-        err = handlers.saveErrorLog(handlers.ErrorLog{\r\n-            ID:       \"3\",\r\n-            Endpoint: \"/youtube/playlists\",\r\n-            Usuario:  \"unknown\",\r\n-            Error:    err.Error(),\r\n-        })\r\n-        if err != nil {\r\n-            fmt.Println(\"Error al guardar el archivo de log:\", err)\r\n-        }\r\n-        c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\r\n-        return\r\n-    }\r\n-\r\n-    responseData, err := json.Marshal(playlists)\r\n-    if err != nil {\r\n-        fmt.Println(\"Error al convertir la respuesta a JSON:\", err)\r\n-        responseData = []byte(\"error al convertir la respuesta a JSON\")\r\n-    }\r\n-\r\n-    err = handlers.saveMonitorLog(handlers.MonitorLog{\r\n-        ID:        \"3\",\r\n-        Endpoint:  \"/youtube/playlists\",\r\n-        Usuario:   \"unknown\",\r\n-        Respuesta: string(responseData),\r\n-    })\r\n-    if err != nil {\r\n-        fmt.Println(\"Error al guardar el archivo de monitorización:\", err)\r\n-    }\r\n-\r\n-    c.JSON(http.StatusOK, playlists)\r\n-}\r\n-\r\n-func getPlaylistItems(c *gin.Context) {\r\n-    playlistID := c.Query(\"playlist_id\")\r\n-    if playlistID == \"\" {\r\n-        err := handlers.saveErrorLog(handlers.ErrorLog{\r\n-            ID:       \"4\",\r\n-            Endpoint: \"/youtube/playlist_items\",\r\n-            Usuario:  \"unknown\",\r\n-            Error:    \"playlist_id query parameter is required\",\r\n-        })\r\n-        if err != nil {\r\n-            fmt.Println(\"Error al guardar el archivo de log:\", err)\r\n-        }\r\n-        c.JSON(http.StatusBadRequest, gin.H{\"error\": \"playlist_id query parameter is required\"})\r\n-        return\r\n-    }\r\n-\r\n-    items, err := youtubeAdapter.GetSearchPlaylistsItems(c, playlistID)\r\n-    if err != nil {\r\n-        err = handlers.saveErrorLog(handlers.ErrorLog{\r\n-            ID:       \"4\",\r\n-            Endpoint: \"/youtube/playlist_items\",\r\n-            Usuario:  \"unknown\",\r\n-            Error:    err.Error(),\r\n-        })\r\n-        if err != nil {\r\n-            fmt.Println(\"Error al guardar el archivo de log:\", err)\r\n-        }\r\n-        c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\r\n-        return\r\n-    }\r\n-\r\n-    responseData, err := json.Marshal(items)\r\n-    if err != nil {\r\n-        fmt.Println(\"Error al convertir la respuesta a JSON:\", err)\r\n-        responseData = []byte(\"error al convertir la respuesta a JSON\")\r\n-    }\r\n-\r\n-    err = handlers.saveMonitorLog(handlers.MonitorLog{\r\n-        ID:        \"4\",\r\n-        Endpoint:  \"/youtube/playlist_items\",\r\n-        Usuario:   \"unknown\",\r\n-        Respuesta: string(responseData),\r\n-    })\r\n-    if err != nil {\r\n-        fmt.Println(\"Error al guardar el archivo de monitorización:\", err)\r\n-    }\r\n-\r\n-    c.JSON(http.StatusOK, items)\r\n-}\r\n-\r\n-func checkLive(c *gin.Context) {\r\n-    live, err := youtubeAdapter.GetCheckLive(c)\r\n-    if err != nil {\r\n-        err = handlers.saveErrorLog(handlers.ErrorLog{\r\n-            ID:       \"5\",\r\n-            Endpoint: \"/youtube/live\",\r\n-            Usuario:  \"unknown\",\r\n-            Error:    err.Error(),\r\n-        })\r\n-        if err != nil {\r\n-            fmt.Println(\"Error al guardar el archivo de log:\", err)\r\n-        }\r\n-        c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\r\n-        return\r\n-    }\r\n-\r\n-    responseData, err := json.Marshal(live)\r\n-    if err != nil {\r\n-        fmt.Println(\"Error al convertir la respuesta a JSON:\", err)\r\n-        responseData = []byte(\"error al convertir la respuesta a JSON\")\r\n-    }\r\n-\r\n-    err = handlers.saveMonitorLog(handlers.MonitorLog{\r\n-        ID:        \"5\",\r\n-        Endpoint:  \"/youtube/live\",\r\n-        Usuario:   \"unknown\",\r\n-        Respuesta: string(responseData),\r\n-    })\r\n-    if err != nil {\r\n-        fmt.Println(\"Error al guardar el archivo de monitorización:\", err)\r\n-    }\r\n-\r\n-    c.JSON(http.StatusOK, live)\r\n-}\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719193322920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,20 +6,14 @@\n     \"fmt\"\r\n     \"github.com/gin-gonic/gin\"\r\n     \"models\"\r\n     \"net/http\"\r\n-    \"adapters/drivens\"\r\n-    \"adapters/drivers\"\r\n )\r\n \r\n-var youtubeAdapter, _ = drivers.NewYouTubeAdapter()\r\n-var monitorAdapter = drivens.NewMonitorAdapter()\r\n-var errorAdapter = drivens.NewErrorAdapter()\r\n-\r\n-func searchYouTube(c *gin.Context) {\r\n+func searchYouTube(c *gin.Context, app *App) {\r\n     searching := c.Query(\"search\")\r\n     if searching == \"\" {\r\n-        err := errorAdapter.SaveErrorLog(models.ErrorLog{\r\n+        err := app.ErrorAdapter.SaveErrorLog(models.ErrorLog{\r\n             ID:       \"1\",\r\n             Endpoint: \"/youtube/search\",\r\n             Usuario:  \"unknown\",\r\n             Error:    \"search query parameter is required\",\r\n@@ -30,11 +24,11 @@\n         c.JSON(http.StatusBadRequest, gin.H{\"error\": \"search query parameter is required\"})\r\n         return\r\n     }\r\n \r\n-    data, err := youtubeAdapter.GetSearching(c, searching)\r\n+    data, err := app.YouTubeAdapter.GetSearching(c, searching)\r\n     if err != nil {\r\n-        err = errorAdapter.SaveErrorLog(models.ErrorLog{\r\n+        err = app.ErrorAdapter.SaveErrorLog(models.ErrorLog{\r\n             ID:       \"1\",\r\n             Endpoint: \"/youtube/search\",\r\n             Usuario:  \"unknown\",\r\n             Error:    err.Error(),\r\n@@ -51,9 +45,9 @@\n         fmt.Println(\"Error al convertir la respuesta a JSON:\", err)\r\n         responseData = []byte(\"error al convertir la respuesta a JSON\")\r\n     }\r\n \r\n-    err = monitorAdapter.SaveMonitorLog(models.MonitorLog{\r\n+    err = app.MonitorAdapter.SaveMonitorLog(models.MonitorLog{\r\n         ID:        \"1\",\r\n         Endpoint:  \"/youtube/search\",\r\n         Usuario:   \"unknown\",\r\n         Respuesta: string(responseData),\r\n@@ -64,12 +58,12 @@\n \r\n     c.JSON(http.StatusOK, data)\r\n }\r\n \r\n-func getRandomVideo(c *gin.Context) {\r\n-    video, err := youtubeAdapter.GetRandomVideo(c)\r\n+func getRandomVideo(c *gin.Context, app *App) {\r\n+    video, err := app.YouTubeAdapter.GetRandomVideo(c)\r\n     if err != nil {\r\n-        err = errorAdapter.SaveErrorLog(models.ErrorLog{\r\n+        err = app.ErrorAdapter.SaveErrorLog(models.ErrorLog{\r\n             ID:       \"2\",\r\n             Endpoint: \"/youtube/random\",\r\n             Usuario:  \"unknown\",\r\n             Error:    err.Error(),\r\n@@ -86,9 +80,9 @@\n         fmt.Println(\"Error al convertir la respuesta a JSON:\", err)\r\n         responseData = []byte(\"error al convertir la respuesta a JSON\")\r\n     }\r\n \r\n-    err = monitorAdapter.SaveMonitorLog(models.MonitorLog{\r\n+    err = app.MonitorAdapter.SaveMonitorLog(models.MonitorLog{\r\n         ID:        \"2\",\r\n         Endpoint:  \"/youtube/random\",\r\n         Usuario:   \"unknown\",\r\n         Respuesta: string(responseData),\r\n@@ -99,12 +93,12 @@\n \r\n     c.JSON(http.StatusOK, video)\r\n }\r\n \r\n-func getPlaylists(c *gin.Context) {\r\n-    playlists, err := youtubeAdapter.GetSearchPlaylists(c)\r\n+func getPlaylists(c *gin.Context, app *App) {\r\n+    playlists, err := app.YouTubeAdapter.GetSearchPlaylists(c)\r\n     if err != nil {\r\n-        err = errorAdapter.SaveErrorLog(models.ErrorLog{\r\n+        err = app.ErrorAdapter.SaveErrorLog(models.ErrorLog{\r\n             ID:       \"3\",\r\n             Endpoint: \"/youtube/playlists\",\r\n             Usuario:  \"unknown\",\r\n             Error:    err.Error(),\r\n@@ -121,9 +115,9 @@\n         fmt.Println(\"Error al convertir la respuesta a JSON:\", err)\r\n         responseData = []byte(\"error al convertir la respuesta a JSON\")\r\n     }\r\n \r\n-    err = monitorAdapter.SaveMonitorLog(models.MonitorLog{\r\n+    err = app.MonitorAdapter.SaveMonitorLog(models.MonitorLog{\r\n         ID:        \"3\",\r\n         Endpoint:  \"/youtube/playlists\",\r\n         Usuario:   \"unknown\",\r\n         Respuesta: string(responseData),\r\n@@ -134,12 +128,12 @@\n \r\n     c.JSON(http.StatusOK, playlists)\r\n }\r\n \r\n-func getPlaylistItems(c *gin.Context) {\r\n+func getPlaylistItems(c *gin.Context, app *App) {\r\n     playlistID := c.Query(\"playlist_id\")\r\n     if playlistID == \"\" {\r\n-        err := errorAdapter.SaveErrorLog(models.ErrorLog{\r\n+        err := app.ErrorAdapter.SaveErrorLog(models.ErrorLog{\r\n             ID:       \"4\",\r\n             Endpoint: \"/youtube/playlist_items\",\r\n             Usuario:  \"unknown\",\r\n             Error:    \"playlist_id query parameter is required\",\r\n@@ -150,11 +144,11 @@\n         c.JSON(http.StatusBadRequest, gin.H{\"error\": \"playlist_id query parameter is required\"})\r\n         return\r\n     }\r\n \r\n-    items, err := youtubeAdapter.GetSearchPlaylistsItems(c, playlistID)\r\n+    items, err := app.YouTubeAdapter.GetSearchPlaylistsItems(c, playlistID)\r\n     if err != nil {\r\n-        err = errorAdapter.SaveErrorLog(models.ErrorLog{\r\n+        err = app.ErrorAdapter.SaveErrorLog(models.ErrorLog{\r\n             ID:       \"4\",\r\n             Endpoint: \"/youtube/playlist_items\",\r\n             Usuario:  \"unknown\",\r\n             Error:    err.Error(),\r\n@@ -171,9 +165,9 @@\n         fmt.Println(\"Error al convertir la respuesta a JSON:\", err)\r\n         responseData = []byte(\"error al convertir la respuesta a JSON\")\r\n     }\r\n \r\n-    err = monitorAdapter.SaveMonitorLog(models.MonitorLog{\r\n+    err = app.MonitorAdapter.SaveMonitorLog(models.MonitorLog{\r\n         ID:        \"4\",\r\n         Endpoint:  \"/youtube/playlist_items\",\r\n         Usuario:   \"unknown\",\r\n         Respuesta: string(responseData),\r\n@@ -184,12 +178,12 @@\n \r\n     c.JSON(http.StatusOK, items)\r\n }\r\n \r\n-func checkLive(c *gin.Context) {\r\n-    live, err := youtubeAdapter.GetCheckLive(c)\r\n+func checkLive(c *gin.Context, app *App) {\r\n+    live, err := app.YouTubeAdapter.GetCheckLive(c)\r\n     if err != nil {\r\n-        err = errorAdapter.SaveErrorLog(models.ErrorLog{\r\n+        err = app.ErrorAdapter.SaveErrorLog(models.ErrorLog{\r\n             ID:       \"5\",\r\n             Endpoint: \"/youtube/live\",\r\n             Usuario:  \"unknown\",\r\n             Error:    err.Error(),\r\n@@ -206,9 +200,9 @@\n         fmt.Println(\"Error al convertir la respuesta a JSON:\", err)\r\n         responseData = []byte(\"error al convertir la respuesta a JSON\")\r\n     }\r\n \r\n-    err = monitorAdapter.SaveMonitorLog(models.MonitorLog{\r\n+    err = app.MonitorAdapter.SaveMonitorLog(models.MonitorLog{\r\n         ID:        \"5\",\r\n         Endpoint:  \"/youtube/live\",\r\n         Usuario:   \"unknown\",\r\n         Respuesta: string(responseData),\r\n"
                },
                {
                    "date": 1719205589339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,215 +1,60 @@\n package main\r\n \r\n import (\r\n     \"context\"\r\n-    \"encoding/json\"\r\n-    \"fmt\"\r\n+    \"log\"\r\n+    \"os\"\r\n+\r\n     \"github.com/gin-gonic/gin\"\r\n-    \"models\"\r\n-    \"net/http\"\r\n+    \"google.golang.org/api/youtube/v3\"\r\n+    \"youtube-api/adapters/drivens\"\r\n+    \"youtube-api/adapters/drivers\"\r\n+    \"youtube-api/handler\"\r\n+    \"youtube-api/ports/drivens\"\r\n+    \"youtube-api/ports/drivers\"\r\n+    \"github.com/joho/godotenv\"\r\n )\r\n \r\n-func searchYouTube(c *gin.Context, app *App) {\r\n-    searching := c.Query(\"search\")\r\n-    if searching == \"\" {\r\n-        err := app.ErrorAdapter.SaveErrorLog(models.ErrorLog{\r\n-            ID:       \"1\",\r\n-            Endpoint: \"/youtube/search\",\r\n-            Usuario:  \"unknown\",\r\n-            Error:    \"search query parameter is required\",\r\n-        })\r\n-        if err != nil {\r\n-            fmt.Println(\"Error al guardar el archivo de log:\", err)\r\n-        }\r\n-        c.JSON(http.StatusBadRequest, gin.H{\"error\": \"search query parameter is required\"})\r\n-        return\r\n+func main() {\r\n+    // Cargar variables de entorno\r\n+    if err := godotenv.Load(); err != nil {\r\n+        log.Fatalf(\"Error loading .env file\")\r\n     }\r\n \r\n-    data, err := app.YouTubeAdapter.GetSearching(c, searching)\r\n+    // Inicializar el adaptador de YouTube\r\n+    ytAdapter, err := drivens.NewYouTubeAdapter()\r\n     if err != nil {\r\n-        err = app.ErrorAdapter.SaveErrorLog(models.ErrorLog{\r\n-            ID:       \"1\",\r\n-            Endpoint: \"/youtube/search\",\r\n-            Usuario:  \"unknown\",\r\n-            Error:    err.Error(),\r\n-        })\r\n-        if err != nil {\r\n-            fmt.Println(\"Error al guardar el archivo de log:\", err)\r\n-        }\r\n-        c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\r\n-        return\r\n+        log.Fatalf(\"Failed to create YouTube adapter: %v\", err)\r\n     }\r\n \r\n-    responseData, err := json.Marshal(data)\r\n-    if err != nil {\r\n-        fmt.Println(\"Error al convertir la respuesta a JSON:\", err)\r\n-        responseData = []byte(\"error al convertir la respuesta a JSON\")\r\n-    }\r\n+    // Inicializar adaptadores de monitoreo y logs\r\n+    monitorAdapter := drivens.NewMonitorAdapter() // Este debe ser implementado en el hexágono de monitoreo\r\n+    logsAdapter := drivens.NewLogsAdapter()       // Este debe ser implementado en el hexágono de logs\r\n \r\n-    err = app.MonitorAdapter.SaveMonitorLog(models.MonitorLog{\r\n-        ID:        \"1\",\r\n-        Endpoint:  \"/youtube/search\",\r\n-        Usuario:   \"unknown\",\r\n-        Respuesta: string(responseData),\r\n-    })\r\n-    if err != nil {\r\n-        fmt.Println(\"Error al guardar el archivo de monitorización:\", err)\r\n-    }\r\n+    // Inicializar el manejador de respuestas\r\n+    responseHandler := handler.NewResponseHandler(monitorAdapter, logsAdapter)\r\n \r\n-    c.JSON(http.StatusOK, data)\r\n-}\r\n+    // Inicializar el adaptador proxy de YouTube\r\n+    ytProxyAdapter := drivers.NewYouTubeProxyAdapter(ytAdapter, responseHandler)\r\n \r\n-func getRandomVideo(c *gin.Context, app *App) {\r\n-    video, err := app.YouTubeAdapter.GetRandomVideo(c)\r\n-    if err != nil {\r\n-        err = app.ErrorAdapter.SaveErrorLog(models.ErrorLog{\r\n-            ID:       \"2\",\r\n-            Endpoint: \"/youtube/random\",\r\n-            Usuario:  \"unknown\",\r\n-            Error:    err.Error(),\r\n-        })\r\n-        if err != nil {\r\n-            fmt.Println(\"Error al guardar el archivo de log:\", err)\r\n-        }\r\n-        c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\r\n-        return\r\n-    }\r\n+    // Configurar rutas de la API\r\n+    router := gin.Default()\r\n+    initializeRoutes(router, ytProxyAdapter)\r\n \r\n-    responseData, err := json.Marshal(video)\r\n-    if err != nil {\r\n-        fmt.Println(\"Error al convertir la respuesta a JSON:\", err)\r\n-        responseData = []byte(\"error al convertir la respuesta a JSON\")\r\n+    // Iniciar servidor\r\n+    port := os.Getenv(\"YOUTUBE_API_PORT\")\r\n+    if port == \"\" {\r\n+        port = \"8080\"\r\n     }\r\n-\r\n-    err = app.MonitorAdapter.SaveMonitorLog(models.MonitorLog{\r\n-        ID:        \"2\",\r\n-        Endpoint:  \"/youtube/random\",\r\n-        Usuario:   \"unknown\",\r\n-        Respuesta: string(responseData),\r\n-    })\r\n-    if err != nil {\r\n-        fmt.Println(\"Error al guardar el archivo de monitorización:\", err)\r\n+    if err := router.Run(\":\" + port); err != nil {\r\n+        log.Fatalf(\"Failed to start server: %v\", err)\r\n     }\r\n-\r\n-    c.JSON(http.StatusOK, video)\r\n }\r\n \r\n-func getPlaylists(c *gin.Context, app *App) {\r\n-    playlists, err := app.YouTubeAdapter.GetSearchPlaylists(c)\r\n-    if err != nil {\r\n-        err = app.ErrorAdapter.SaveErrorLog(models.ErrorLog{\r\n-            ID:       \"3\",\r\n-            Endpoint: \"/youtube/playlists\",\r\n-            Usuario:  \"unknown\",\r\n-            Error:    err.Error(),\r\n-        })\r\n-        if err != nil {\r\n-            fmt.Println(\"Error al guardar el archivo de log:\", err)\r\n-        }\r\n-        c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\r\n-        return\r\n-    }\r\n-\r\n-    responseData, err := json.Marshal(playlists)\r\n-    if err != nil {\r\n-        fmt.Println(\"Error al convertir la respuesta a JSON:\", err)\r\n-        responseData = []byte(\"error al convertir la respuesta a JSON\")\r\n-    }\r\n-\r\n-    err = app.MonitorAdapter.SaveMonitorLog(models.MonitorLog{\r\n-        ID:        \"3\",\r\n-        Endpoint:  \"/youtube/playlists\",\r\n-        Usuario:   \"unknown\",\r\n-        Respuesta: string(responseData),\r\n-    })\r\n-    if err != nil {\r\n-        fmt.Println(\"Error al guardar el archivo de monitorización:\", err)\r\n-    }\r\n-\r\n-    c.JSON(http.StatusOK, playlists)\r\n+func initializeRoutes(router *gin.Engine, ytProxyAdapter *drivers.YouTubeProxyAdapter) {\r\n+    router.GET(\"/youtube/search\", ytProxyAdapter.GetSearching)\r\n+    router.GET(\"/youtube/random\", ytProxyAdapter.GetRandomVideo)\r\n+    router.GET(\"/youtube/playlists\", ytProxyAdapter.GetSearchPlaylists)\r\n+    router.GET(\"/youtube/playlist-items\", ytProxyAdapter.GetSearchPlaylistsItems)\r\n+    router.GET(\"/youtube/live\", ytProxyAdapter.GetCheckLive)\r\n }\r\n-\r\n-func getPlaylistItems(c *gin.Context, app *App) {\r\n-    playlistID := c.Query(\"playlist_id\")\r\n-    if playlistID == \"\" {\r\n-        err := app.ErrorAdapter.SaveErrorLog(models.ErrorLog{\r\n-            ID:       \"4\",\r\n-            Endpoint: \"/youtube/playlist_items\",\r\n-            Usuario:  \"unknown\",\r\n-            Error:    \"playlist_id query parameter is required\",\r\n-        })\r\n-        if err != nil {\r\n-            fmt.Println(\"Error al guardar el archivo de log:\", err)\r\n-        }\r\n-        c.JSON(http.StatusBadRequest, gin.H{\"error\": \"playlist_id query parameter is required\"})\r\n-        return\r\n-    }\r\n-\r\n-    items, err := app.YouTubeAdapter.GetSearchPlaylistsItems(c, playlistID)\r\n-    if err != nil {\r\n-        err = app.ErrorAdapter.SaveErrorLog(models.ErrorLog{\r\n-            ID:       \"4\",\r\n-            Endpoint: \"/youtube/playlist_items\",\r\n-            Usuario:  \"unknown\",\r\n-            Error:    err.Error(),\r\n-        })\r\n-        if err != nil {\r\n-            fmt.Println(\"Error al guardar el archivo de log:\", err)\r\n-        }\r\n-        c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\r\n-        return\r\n-    }\r\n-\r\n-    responseData, err := json.Marshal(items)\r\n-    if err != nil {\r\n-        fmt.Println(\"Error al convertir la respuesta a JSON:\", err)\r\n-        responseData = []byte(\"error al convertir la respuesta a JSON\")\r\n-    }\r\n-\r\n-    err = app.MonitorAdapter.SaveMonitorLog(models.MonitorLog{\r\n-        ID:        \"4\",\r\n-        Endpoint:  \"/youtube/playlist_items\",\r\n-        Usuario:   \"unknown\",\r\n-        Respuesta: string(responseData),\r\n-    })\r\n-    if err != nil {\r\n-        fmt.Println(\"Error al guardar el archivo de monitorización:\", err)\r\n-    }\r\n-\r\n-    c.JSON(http.StatusOK, items)\r\n-}\r\n-\r\n-func checkLive(c *gin.Context, app *App) {\r\n-    live, err := app.YouTubeAdapter.GetCheckLive(c)\r\n-    if err != nil {\r\n-        err = app.ErrorAdapter.SaveErrorLog(models.ErrorLog{\r\n-            ID:       \"5\",\r\n-            Endpoint: \"/youtube/live\",\r\n-            Usuario:  \"unknown\",\r\n-            Error:    err.Error(),\r\n-        })\r\n-        if err != nil {\r\n-            fmt.Println(\"Error al guardar el archivo de log:\", err)\r\n-        }\r\n-        c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\r\n-        return\r\n-    }\r\n-\r\n-    responseData, err := json.Marshal(live)\r\n-    if err != nil {\r\n-        fmt.Println(\"Error al convertir la respuesta a JSON:\", err)\r\n-        responseData = []byte(\"error al convertir la respuesta a JSON\")\r\n-    }\r\n-\r\n-    err = app.MonitorAdapter.SaveMonitorLog(models.MonitorLog{\r\n-        ID:        \"5\",\r\n-        Endpoint:  \"/youtube/live\",\r\n-        Usuario:   \"unknown\",\r\n-        Respuesta: string(responseData),\r\n-    })\r\n-    if err != nil {\r\n-        fmt.Println(\"Error al guardar el archivo de monitorización:\", err)\r\n-    }\r\n-\r\n-    c.JSON(http.StatusOK, live)\r\n-}\r\n"
                }
            ],
            "date": 1719192978126,
            "name": "Commit-0",
            "content": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"github.com/gin-gonic/gin\"\r\n    \"handlers\"\r\n    \"models\"\r\n    \"net/http\"\r\n    \"adapters/drivers\"\r\n)\r\n\r\nvar youtubeAdapter, _ = drivers.NewYouTubeAdapter()\r\n\r\nfunc searchYouTube(c *gin.Context) {\r\n    searching := c.Query(\"search\")\r\n    if searching == \"\" {\r\n        err := handlers.saveErrorLog(handlers.ErrorLog{\r\n            ID:       \"1\",\r\n            Endpoint: \"/youtube/search\",\r\n            Usuario:  \"unknown\",\r\n            Error:    \"search query parameter is required\",\r\n        })\r\n        if err != nil {\r\n            fmt.Println(\"Error al guardar el archivo de log:\", err)\r\n        }\r\n        c.JSON(http.StatusBadRequest, gin.H{\"error\": \"search query parameter is required\"})\r\n        return\r\n    }\r\n\r\n    data, err := youtubeAdapter.GetSearching(c, searching)\r\n    if err != nil {\r\n        err = handlers.saveErrorLog(handlers.ErrorLog{\r\n            ID:       \"1\",\r\n            Endpoint: \"/youtube/search\",\r\n            Usuario:  \"unknown\",\r\n            Error:    err.Error(),\r\n        })\r\n        if err != nil {\r\n            fmt.Println(\"Error al guardar el archivo de log:\", err)\r\n        }\r\n        c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\r\n        return\r\n    }\r\n\r\n    responseData, err := json.Marshal(data)\r\n    if err != nil {\r\n        fmt.Println(\"Error al convertir la respuesta a JSON:\", err)\r\n        responseData = []byte(\"error al convertir la respuesta a JSON\")\r\n    }\r\n\r\n    err = handlers.saveMonitorLog(handlers.MonitorLog{\r\n        ID:        \"1\",\r\n        Endpoint:  \"/youtube/search\",\r\n        Usuario:   \"unknown\",\r\n        Respuesta: string(responseData),\r\n    })\r\n    if err != nil {\r\n        fmt.Println(\"Error al guardar el archivo de monitorización:\", err)\r\n    }\r\n\r\n    c.JSON(http.StatusOK, data)\r\n}\r\n\r\nfunc getRandomVideo(c *gin.Context) {\r\n    video, err := youtubeAdapter.GetRandomVideo(c)\r\n    if err != nil {\r\n        err = handlers.saveErrorLog(handlers.ErrorLog{\r\n            ID:       \"2\",\r\n            Endpoint: \"/youtube/random\",\r\n            Usuario:  \"unknown\",\r\n            Error:    err.Error(),\r\n        })\r\n        if err != nil {\r\n            fmt.Println(\"Error al guardar el archivo de log:\", err)\r\n        }\r\n        c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\r\n        return\r\n    }\r\n\r\n    responseData, err := json.Marshal(video)\r\n    if err != nil {\r\n        fmt.Println(\"Error al convertir la respuesta a JSON:\", err)\r\n        responseData = []byte(\"error al convertir la respuesta a JSON\")\r\n    }\r\n\r\n    err = handlers.saveMonitorLog(handlers.MonitorLog{\r\n        ID:        \"2\",\r\n        Endpoint:  \"/youtube/random\",\r\n        Usuario:   \"unknown\",\r\n        Respuesta: string(responseData),\r\n    })\r\n    if err != nil {\r\n        fmt.Println(\"Error al guardar el archivo de monitorización:\", err)\r\n    }\r\n\r\n    c.JSON(http.StatusOK, video)\r\n}\r\n\r\nfunc getPlaylists(c *gin.Context) {\r\n    playlists, err := youtubeAdapter.GetSearchPlaylists(c)\r\n    if err != nil {\r\n        err = handlers.saveErrorLog(handlers.ErrorLog{\r\n            ID:       \"3\",\r\n            Endpoint: \"/youtube/playlists\",\r\n            Usuario:  \"unknown\",\r\n            Error:    err.Error(),\r\n        })\r\n        if err != nil {\r\n            fmt.Println(\"Error al guardar el archivo de log:\", err)\r\n        }\r\n        c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\r\n        return\r\n    }\r\n\r\n    responseData, err := json.Marshal(playlists)\r\n    if err != nil {\r\n        fmt.Println(\"Error al convertir la respuesta a JSON:\", err)\r\n        responseData = []byte(\"error al convertir la respuesta a JSON\")\r\n    }\r\n\r\n    err = handlers.saveMonitorLog(handlers.MonitorLog{\r\n        ID:        \"3\",\r\n        Endpoint:  \"/youtube/playlists\",\r\n        Usuario:   \"unknown\",\r\n        Respuesta: string(responseData),\r\n    })\r\n    if err != nil {\r\n        fmt.Println(\"Error al guardar el archivo de monitorización:\", err)\r\n    }\r\n\r\n    c.JSON(http.StatusOK, playlists)\r\n}\r\n\r\nfunc getPlaylistItems(c *gin.Context) {\r\n    playlistID := c.Query(\"playlist_id\")\r\n    if playlistID == \"\" {\r\n        err := handlers.saveErrorLog(handlers.ErrorLog{\r\n            ID:       \"4\",\r\n            Endpoint: \"/youtube/playlist_items\",\r\n            Usuario:  \"unknown\",\r\n            Error:    \"playlist_id query parameter is required\",\r\n        })\r\n        if err != nil {\r\n            fmt.Println(\"Error al guardar el archivo de log:\", err)\r\n        }\r\n        c.JSON(http.StatusBadRequest, gin.H{\"error\": \"playlist_id query parameter is required\"})\r\n        return\r\n    }\r\n\r\n    items, err := youtubeAdapter.GetSearchPlaylistsItems(c, playlistID)\r\n    if err != nil {\r\n        err = handlers.saveErrorLog(handlers.ErrorLog{\r\n            ID:       \"4\",\r\n            Endpoint: \"/youtube/playlist_items\",\r\n            Usuario:  \"unknown\",\r\n            Error:    err.Error(),\r\n        })\r\n        if err != nil {\r\n            fmt.Println(\"Error al guardar el archivo de log:\", err)\r\n        }\r\n        c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\r\n        return\r\n    }\r\n\r\n    responseData, err := json.Marshal(items)\r\n    if err != nil {\r\n        fmt.Println(\"Error al convertir la respuesta a JSON:\", err)\r\n        responseData = []byte(\"error al convertir la respuesta a JSON\")\r\n    }\r\n\r\n    err = handlers.saveMonitorLog(handlers.MonitorLog{\r\n        ID:        \"4\",\r\n        Endpoint:  \"/youtube/playlist_items\",\r\n        Usuario:   \"unknown\",\r\n        Respuesta: string(responseData),\r\n    })\r\n    if err != nil {\r\n        fmt.Println(\"Error al guardar el archivo de monitorización:\", err)\r\n    }\r\n\r\n    c.JSON(http.StatusOK, items)\r\n}\r\n\r\nfunc checkLive(c *gin.Context) {\r\n    live, err := youtubeAdapter.GetCheckLive(c)\r\n    if err != nil {\r\n        err = handlers.saveErrorLog(handlers.ErrorLog{\r\n            ID:       \"5\",\r\n            Endpoint: \"/youtube/live\",\r\n            Usuario:  \"unknown\",\r\n            Error:    err.Error(),\r\n        })\r\n        if err != nil {\r\n            fmt.Println(\"Error al guardar el archivo de log:\", err)\r\n        }\r\n        c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\r\n        return\r\n    }\r\n\r\n    responseData, err := json.Marshal(live)\r\n    if err != nil {\r\n        fmt.Println(\"Error al convertir la respuesta a JSON:\", err)\r\n        responseData = []byte(\"error al convertir la respuesta a JSON\")\r\n    }\r\n\r\n    err = handlers.saveMonitorLog(handlers.MonitorLog{\r\n        ID:        \"5\",\r\n        Endpoint:  \"/youtube/live\",\r\n        Usuario:   \"unknown\",\r\n        Respuesta: string(responseData),\r\n    })\r\n    if err != nil {\r\n        fmt.Println(\"Error al guardar el archivo de monitorización:\", err)\r\n    }\r\n\r\n    c.JSON(http.StatusOK, live)\r\n}\r\n"
        }
    ]
}