{
    "sourceFile": "composer.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1719193268472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719198654708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,70 +9,47 @@\n     control_panel_adapters \"services/control-panel/adapters/drivers\"\r\n \r\n     monitor_api \"services/monitor-api\"\r\n     monitor_adapters \"services/monitor-api/adapters/drivers\"\r\n-    monitor_ports \"services/monitor-api/ports/drivers\"\r\n \r\n     logs_api \"services/logs-api\"\r\n     logs_adapters \"services/logs-api/adapters/drivers\"\r\n-    logs_ports \"services/logs-api/ports/drivers\"\r\n \r\n     youtube_api \"services/youtube-api\"\r\n     youtube_adapters \"services/youtube-api/adapters/drivers\"\r\n-    youtube_ports \"services/youtube-api/ports/drivers\"\r\n \r\n     \"github.com/joho/godotenv\"\r\n )\r\n \r\n type App struct {\r\n-    YouTubeAdapter   youtube_ports.YouTubePort\r\n-    MonitorAdapter   monitor_ports.MonitorPort\r\n-    ErrorAdapter     logs_ports.ErrorPort\r\n-    ControlPanel     control_panel.ControlPanelService\r\n-    MonitorService   monitor_api.MonitorService\r\n-    LogsService      logs_api.LogsService\r\n+    YouTubeAdapter   youtube_adapters.YouTubePort\r\n+    MonitorAdapter   monitor_adapters.MonitorPort\r\n+    ErrorAdapter     logs_adapters.LogsPort\r\n+    ControlPanel     control_panel_adapters.ControlPanelPort\r\n }\r\n \r\n func Compose() *App {\r\n-    // Load environment variables\r\n     if err := godotenv.Load(); err != nil {\r\n         log.Fatalf(\"Error loading .env file\")\r\n     }\r\n \r\n-    // Create ctx (context)\r\n     ctx := context.Background()\r\n \r\n-    // Create YouTube adapter\r\n     ytAdapter, err := youtube_adapters.NewYouTubeAdapter()\r\n     if err != nil {\r\n         log.Fatalf(\"Error creating YouTube adapter: %v\", err)\r\n     }\r\n \r\n-    // Create Monitor adapter\r\n     monitorAdapter := monitor_adapters.NewMonitorAdapter()\r\n-\r\n-    // Create Error adapter\r\n     errorAdapter := logs_adapters.NewErrorAdapter()\r\n+    controlPanelAdapter := control_panel_adapters.NewControlPanelAdapter(ctx, ytAdapter, monitorAdapter, errorAdapter)\r\n \r\n-    // Create Control Panel service\r\n-    controlPanelService := control_panel.NewControlPanelService()\r\n-\r\n-    // Create Monitor service\r\n-    monitorService := monitor_api.NewMonitorService(monitorAdapter)\r\n-\r\n-    // Create Logs service\r\n-    logsService := logs_api.NewLogsService(errorAdapter)\r\n-\r\n-    app := &App{\r\n+    return &App{\r\n         YouTubeAdapter: ytAdapter,\r\n         MonitorAdapter: monitorAdapter,\r\n         ErrorAdapter:   errorAdapter,\r\n-        ControlPanel:   controlPanelService,\r\n-        MonitorService: monitorService,\r\n-        LogsService:    logsService,\r\n+        ControlPanel:   controlPanelAdapter,\r\n     }\r\n-\r\n-    return app\r\n }\r\n \r\n func createDirectories() {\r\n     directories := []string{\"logs\", \"monitor\"}\r\n"
                },
                {
                    "date": 1719215208049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+package main\r\n+\r\n+import (\r\n+    \"context\"\r\n+    \"authentication-api/adapters/drivens\"\r\n+    \"authentication-api/ports/drivers\"\r\n+    \"authorization-api/adapters/drivens\"\r\n+    \"authorization-api/ports/drivers\"\r\n+    \"control-panel/adapters/drivens\"\r\n+    \"control-panel/adapters/drivers\"\r\n+    \"monitor-api/adapters/drivens\"\r\n+    \"monitor-api/ports/drivers\"\r\n+    \"logs-api/adapters/drivens\"\r\n+    \"logs-api/ports/drivers\"\r\n+    \"youtube-api/adapters/drivens\"\r\n+    \"youtube-api/ports/drivers\"\r\n+)\r\n+\r\n+func Compose() *drivers.ControlPanelDriverAdapter {\r\n+    ctx := context.Background()\r\n+\r\n+    // Create adapters for each service\r\n+    authAdapter := drivens.NewAuthenticationAdapter()\r\n+    authzAdapter := drivens.NewAuthorizationAdapter()\r\n+    youtubeAdapter, err := drivens.NewYouTubeAdapter()\r\n+    if err != nil {\r\n+        panic(err)\r\n+    }\r\n+    monitorAdapter := drivens.NewMonitorAdapter()\r\n+    logsAdapter := drivens.NewLogsAdapter()\r\n+\r\n+    // Create driven ports for each service\r\n+    authDrivenPort := drivers.NewAuthenticationDriverAdapter(authAdapter)\r\n+    authzDrivenPort := drivers.NewAuthorizationDriverAdapter(authzAdapter)\r\n+    youtubeDrivenPort := drivers.NewYouTubeDriverAdapter(youtubeAdapter)\r\n+    monitorDrivenPort := drivers.NewMonitorDriverAdapter(monitorAdapter)\r\n+    logsDrivenPort := drivers.NewLogsDriverAdapter(logsAdapter)\r\n+\r\n+    // Create control panel driven adapter\r\n+    controlPanelDrivenAdapter := drivens.NewControlPanelAdapter(\r\n+        authDrivenPort,\r\n+        authzDrivenPort,\r\n+        youtubeDrivenPort,\r\n+        monitorDrivenPort,\r\n+        logsDrivenPort,\r\n+    )\r\n+\r\n+    // Create control panel driver adapter\r\n+    controlPanelDriverAdapter := drivers.NewControlPanelDriverAdapter(controlPanelDrivenAdapter)\r\n+\r\n+    return controlPanelDriverAdapter\r\n+}\r\n"
                },
                {
                    "date": 1719215257090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,68 +49,4 @@\n     controlPanelDriverAdapter := drivers.NewControlPanelDriverAdapter(controlPanelDrivenAdapter)\r\n \r\n     return controlPanelDriverAdapter\r\n }\r\n-package main\r\n-\r\n-import (\r\n-    \"context\"\r\n-    \"log\"\r\n-    \"os\"\r\n-\r\n-    control_panel \"services/control-panel\"\r\n-    control_panel_adapters \"services/control-panel/adapters/drivers\"\r\n-\r\n-    monitor_api \"services/monitor-api\"\r\n-    monitor_adapters \"services/monitor-api/adapters/drivers\"\r\n-\r\n-    logs_api \"services/logs-api\"\r\n-    logs_adapters \"services/logs-api/adapters/drivers\"\r\n-\r\n-    youtube_api \"services/youtube-api\"\r\n-    youtube_adapters \"services/youtube-api/adapters/drivers\"\r\n-\r\n-    \"github.com/joho/godotenv\"\r\n-)\r\n-\r\n-type App struct {\r\n-    YouTubeAdapter   youtube_adapters.YouTubePort\r\n-    MonitorAdapter   monitor_adapters.MonitorPort\r\n-    ErrorAdapter     logs_adapters.LogsPort\r\n-    ControlPanel     control_panel_adapters.ControlPanelPort\r\n-}\r\n-\r\n-func Compose() *App {\r\n-    if err := godotenv.Load(); err != nil {\r\n-        log.Fatalf(\"Error loading .env file\")\r\n-    }\r\n-\r\n-    ctx := context.Background()\r\n-\r\n-    ytAdapter, err := youtube_adapters.NewYouTubeAdapter()\r\n-    if err != nil {\r\n-        log.Fatalf(\"Error creating YouTube adapter: %v\", err)\r\n-    }\r\n-\r\n-    monitorAdapter := monitor_adapters.NewMonitorAdapter()\r\n-    errorAdapter := logs_adapters.NewErrorAdapter()\r\n-    controlPanelAdapter := control_panel_adapters.NewControlPanelAdapter(ctx, ytAdapter, monitorAdapter, errorAdapter)\r\n-\r\n-    return &App{\r\n-        YouTubeAdapter: ytAdapter,\r\n-        MonitorAdapter: monitorAdapter,\r\n-        ErrorAdapter:   errorAdapter,\r\n-        ControlPanel:   controlPanelAdapter,\r\n-    }\r\n-}\r\n-\r\n-func createDirectories() {\r\n-    directories := []string{\"logs\", \"monitor\"}\r\n-    for _, dir := range directories {\r\n-        if _, err := os.Stat(dir); os.IsNotExist(err) {\r\n-            err := os.Mkdir(dir, os.ModePerm)\r\n-            if err != nil {\r\n-                log.Fatalf(\"Failed to create directory %s: %v\", dir, err)\r\n-            }\r\n-        }\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1719215574121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,52 +1,52 @@\n package main\r\n \r\n import (\r\n     \"context\"\r\n-    \"authentication-api/adapters/drivens\"\r\n-    \"authentication-api/ports/drivers\"\r\n-    \"authorization-api/adapters/drivens\"\r\n-    \"authorization-api/ports/drivers\"\r\n-    \"control-panel/adapters/drivens\"\r\n-    \"control-panel/adapters/drivers\"\r\n-    \"monitor-api/adapters/drivens\"\r\n-    \"monitor-api/ports/drivers\"\r\n-    \"logs-api/adapters/drivens\"\r\n-    \"logs-api/ports/drivers\"\r\n-    \"youtube-api/adapters/drivens\"\r\n-    \"youtube-api/ports/drivers\"\r\n+    authdrivens \"authentication-api/adapters/drivens\"\r\n+    authdrivers \"authentication-api/ports/drivers\"\r\n+    authzdrivens \"authorization-api/adapters/drivens\"\r\n+    authzdrivers \"authorization-api/ports/drivers\"\r\n+    controlpaneldrivens \"control-panel/adapters/drivens\"\r\n+    controlpaneldrivers \"control-panel/adapters/drivers\"\r\n+    monitordrivens \"monitor-api/adapters/drivens\"\r\n+    monitordrivers \"monitor-api/ports/drivers\"\r\n+    logsdrivens \"logs-api/adapters/drivens\"\r\n+    logsdrivers \"logs-api/ports/drivers\"\r\n+    youtubedrivens \"youtube-api/adapters/drivens\"\r\n+    youtubedrivers \"youtube-api/ports/drivers\"\r\n )\r\n \r\n-func Compose() *drivers.ControlPanelDriverAdapter {\r\n+func Compose() *controlpaneldrivers.ControlPanelDriverAdapter {\r\n     ctx := context.Background()\r\n \r\n     // Create adapters for each service\r\n-    authAdapter := drivens.NewAuthenticationAdapter()\r\n-    authzAdapter := drivens.NewAuthorizationAdapter()\r\n-    youtubeAdapter, err := drivens.NewYouTubeAdapter()\r\n+    authAdapter := authdrivens.NewAuthenticationAdapter()\r\n+    authzAdapter := authzdrivens.NewAuthorizationAdapter()\r\n+    youtubeAdapter, err := youtubedrivens.NewYouTubeAdapter()\r\n     if err != nil {\r\n         panic(err)\r\n     }\r\n-    monitorAdapter := drivens.NewMonitorAdapter()\r\n-    logsAdapter := drivens.NewLogsAdapter()\r\n+    monitorAdapter := monitordrivens.NewMonitorAdapter()\r\n+    logsAdapter := logsdrivens.NewLogsAdapter()\r\n \r\n     // Create driven ports for each service\r\n-    authDrivenPort := drivers.NewAuthenticationDriverAdapter(authAdapter)\r\n-    authzDrivenPort := drivers.NewAuthorizationDriverAdapter(authzAdapter)\r\n-    youtubeDrivenPort := drivers.NewYouTubeDriverAdapter(youtubeAdapter)\r\n-    monitorDrivenPort := drivers.NewMonitorDriverAdapter(monitorAdapter)\r\n-    logsDrivenPort := drivers.NewLogsDriverAdapter(logsAdapter)\r\n+    authDrivenPort := authdrivers.NewAuthenticationDriverAdapter(authAdapter)\r\n+    authzDrivenPort := authzdrivers.NewAuthorizationDriverAdapter(authzAdapter)\r\n+    youtubeDrivenPort := youtubedrivers.NewYouTubeDriverAdapter(youtubeAdapter)\r\n+    monitorDrivenPort := monitordrivers.NewMonitorDriverAdapter(monitorAdapter)\r\n+    logsDrivenPort := logsdrivers.NewLogsDriverAdapter(logsAdapter)\r\n \r\n     // Create control panel driven adapter\r\n-    controlPanelDrivenAdapter := drivens.NewControlPanelAdapter(\r\n+    controlPanelDrivenAdapter := controlpaneldrivens.NewControlPanelAdapter(\r\n         authDrivenPort,\r\n         authzDrivenPort,\r\n         youtubeDrivenPort,\r\n         monitorDrivenPort,\r\n         logsDrivenPort,\r\n     )\r\n \r\n     // Create control panel driver adapter\r\n-    controlPanelDriverAdapter := drivers.NewControlPanelDriverAdapter(controlPanelDrivenAdapter)\r\n+    controlPanelDriverAdapter := controlpaneldrivers.NewControlPanelDriverAdapter(controlPanelDrivenAdapter)\r\n \r\n     return controlPanelDriverAdapter\r\n }\r\n"
                }
            ],
            "date": 1719193268472,
            "name": "Commit-0",
            "content": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"log\"\r\n    \"os\"\r\n\r\n    control_panel \"services/control-panel\"\r\n    control_panel_adapters \"services/control-panel/adapters/drivers\"\r\n\r\n    monitor_api \"services/monitor-api\"\r\n    monitor_adapters \"services/monitor-api/adapters/drivers\"\r\n    monitor_ports \"services/monitor-api/ports/drivers\"\r\n\r\n    logs_api \"services/logs-api\"\r\n    logs_adapters \"services/logs-api/adapters/drivers\"\r\n    logs_ports \"services/logs-api/ports/drivers\"\r\n\r\n    youtube_api \"services/youtube-api\"\r\n    youtube_adapters \"services/youtube-api/adapters/drivers\"\r\n    youtube_ports \"services/youtube-api/ports/drivers\"\r\n\r\n    \"github.com/joho/godotenv\"\r\n)\r\n\r\ntype App struct {\r\n    YouTubeAdapter   youtube_ports.YouTubePort\r\n    MonitorAdapter   monitor_ports.MonitorPort\r\n    ErrorAdapter     logs_ports.ErrorPort\r\n    ControlPanel     control_panel.ControlPanelService\r\n    MonitorService   monitor_api.MonitorService\r\n    LogsService      logs_api.LogsService\r\n}\r\n\r\nfunc Compose() *App {\r\n    // Load environment variables\r\n    if err := godotenv.Load(); err != nil {\r\n        log.Fatalf(\"Error loading .env file\")\r\n    }\r\n\r\n    // Create ctx (context)\r\n    ctx := context.Background()\r\n\r\n    // Create YouTube adapter\r\n    ytAdapter, err := youtube_adapters.NewYouTubeAdapter()\r\n    if err != nil {\r\n        log.Fatalf(\"Error creating YouTube adapter: %v\", err)\r\n    }\r\n\r\n    // Create Monitor adapter\r\n    monitorAdapter := monitor_adapters.NewMonitorAdapter()\r\n\r\n    // Create Error adapter\r\n    errorAdapter := logs_adapters.NewErrorAdapter()\r\n\r\n    // Create Control Panel service\r\n    controlPanelService := control_panel.NewControlPanelService()\r\n\r\n    // Create Monitor service\r\n    monitorService := monitor_api.NewMonitorService(monitorAdapter)\r\n\r\n    // Create Logs service\r\n    logsService := logs_api.NewLogsService(errorAdapter)\r\n\r\n    app := &App{\r\n        YouTubeAdapter: ytAdapter,\r\n        MonitorAdapter: monitorAdapter,\r\n        ErrorAdapter:   errorAdapter,\r\n        ControlPanel:   controlPanelService,\r\n        MonitorService: monitorService,\r\n        LogsService:    logsService,\r\n    }\r\n\r\n    return app\r\n}\r\n\r\nfunc createDirectories() {\r\n    directories := []string{\"logs\", \"monitor\"}\r\n    for _, dir := range directories {\r\n        if _, err := os.Stat(dir); os.IsNotExist(err) {\r\n            err := os.Mkdir(dir, os.ModePerm)\r\n            if err != nil {\r\n                log.Fatalf(\"Failed to create directory %s: %v\", dir, err)\r\n            }\r\n        }\r\n    }\r\n}\r\n"
        }
    ]
}