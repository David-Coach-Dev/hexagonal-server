{
    "sourceFile": "control-panel/control_panel.domain.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1719194080971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719198886863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,31 +0,0 @@\n-package main\r\n-\r\n-import (\r\n-    \"context\"\r\n-    \"github.com/gin-gonic/gin\"\r\n-    \"control-panel/adapters/drivers\"\r\n-    \"control-panel/adapters/drivens\"\r\n-    \"control-panel/ports/drivers\"\r\n-    \"control-panel/ports/drivens\"\r\n-    \"control-panel/models\"\r\n-    \"control-panel/handler\"\r\n-)\r\n-\r\n-var drivenAdapter drivens.DrivenAdapterPort = drivens.NewDrivenAdapter()\r\n-var controlPanelAdapter drivers.ControlPanelPort = drivers.NewControlPanelAdapter(drivenAdapter)\r\n-\r\n-func ExampleEndpoint(c *gin.Context) {\r\n-    var input models.ExampleModel\r\n-    if err := c.BindJSON(&input); err != nil {\r\n-        handler.HandleError(c, err)\r\n-        return\r\n-    }\r\n-\r\n-    result, err := controlPanelAdapter.ExampleFunction(context.Background(), input.Data)\r\n-    if err != nil {\r\n-        handler.HandleError(c, err)\r\n-        return\r\n-    }\r\n-\r\n-    c.JSON(http.StatusOK, gin.H{\"result\": result})\r\n-}\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719201477424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +0,0 @@\n-\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719209346136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,26 @@\n+package drivens\r\n+\r\n+import (\r\n+    \"context\"\r\n+    \"control-panel/models\"\r\n+)\r\n+\r\n+type ControlPanelAdapter struct {\r\n+    authAdapter  AuthenticationDrivenPort\r\n+    authzAdapter AuthorizationDrivenPort\r\n+}\r\n+\r\n+func NewControlPanelAdapter(authAdapter AuthenticationDrivenPort, authzAdapter AuthorizationDrivenPort) *ControlPanelAdapter {\r\n+    return &ControlPanelAdapter{\r\n+        authAdapter:  authAdapter,\r\n+        authzAdapter: authzAdapter,\r\n+    }\r\n+}\r\n+\r\n+func (cpa *ControlPanelAdapter) Authenticate(ctx context.Context, credentials models.Credentials) (string, error) {\r\n+    return cpa.authAdapter.Authenticate(ctx, credentials)\r\n+}\r\n+\r\n+func (cpa *ControlPanelAdapter) Authorize(ctx context.Context, token string, resource string, action string) (bool, error) {\r\n+    return cpa.authzAdapter.Authorize(ctx, token, resource, action)\r\n+}\r\n"
                },
                {
                    "date": 1719210221398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,138 @@\n-package drivens\r\n+package main\r\n \r\n import (\r\n     \"context\"\r\n     \"control-panel/models\"\r\n+    \"github.com/gin-gonic/gin\"\r\n+    \"control-panel/ports/drivens\"\r\n+    \"control-panel/handler\"\r\n )\r\n \r\n-type ControlPanelAdapter struct {\r\n-    authAdapter  AuthenticationDrivenPort\r\n-    authzAdapter AuthorizationDrivenPort\r\n+type ControlPanelService struct {\r\n+    drivenAdapter    drivens.ControlPanelDrivenPort\r\n+    responseHandler  *handler.ResponseHandler\r\n }\r\n \r\n-func NewControlPanelAdapter(authAdapter AuthenticationDrivenPort, authzAdapter AuthorizationDrivenPort) *ControlPanelAdapter {\r\n-    return &ControlPanelAdapter{\r\n-        authAdapter:  authAdapter,\r\n-        authzAdapter: authzAdapter,\r\n+func NewControlPanelService(drivenAdapter drivens.ControlPanelDrivenPort, responseHandler *handler.ResponseHandler) *ControlPanelService {\r\n+    return &ControlPanelService{\r\n+        drivenAdapter:   drivenAdapter,\r\n+        responseHandler: responseHandler,\r\n     }\r\n }\r\n \r\n-func (cpa *ControlPanelAdapter) Authenticate(ctx context.Context, credentials models.Credentials) (string, error) {\r\n-    return cpa.authAdapter.Authenticate(ctx, credentials)\r\n+func (cps *ControlPanelService) HandleAuthenticate(c *gin.Context) {\r\n+    var credentials models.Credentials\r\n+    if err := c.BindJSON(&credentials); err != nil {\r\n+        handler.HandleError(c, err)\r\n+        return\r\n+    }\r\n+    token, err := cps.drivenAdapter.Authenticate(context.Background(), credentials)\r\n+    cps.responseHandler.HandleResponse(c, token, err, \"/authenticate\", credentials.Username)\r\n }\r\n \r\n-func (cpa *ControlPanelAdapter) Authorize(ctx context.Context, token string, resource string, action string) (bool, error) {\r\n-    return cpa.authzAdapter.Authorize(ctx, token, resource, action)\r\n+func (cps *ControlPanelService) HandleAuthorize(c *gin.Context) {\r\n+    token := c.GetHeader(\"Authorization\")\r\n+    resource := c.Query(\"resource\")\r\n+    action := c.Query(\"action\")\r\n+    authorized, err := cps.drivenAdapter.Authorize(context.Background(), token, resource, action)\r\n+    cps.responseHandler.HandleResponse(c, authorized, err, \"/authorize\", \"unknown\")\r\n }\r\n-\n+\r\n+// Funciones de YouTube\r\n+func (cps *ControlPanelService) HandleYouTubeSearching(c *gin.Context) {\r\n+    query := c.Query(\"search\")\r\n+    data, err := cps.drivenAdapter.GetYouTubeSearching(context.Background(), query)\r\n+    cps.responseHandler.HandleResponse(c, data, err, \"/youtube/search\", \"unknown\")\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleYouTubeRandomVideo(c *gin.Context) {\r\n+    data, err := cps.drivenAdapter.GetYouTubeRandomVideo(context.Background())\r\n+    cps.responseHandler.HandleResponse(c, data, err, \"/youtube/random\", \"unknown\")\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleYouTubePlaylists(c *gin.Context) {\r\n+    data, err := cps.drivenAdapter.GetYouTubePlaylists(context.Background())\r\n+    cps.responseHandler.HandleResponse(c, data, err, \"/youtube/playlists\", \"unknown\")\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleYouTubePlaylistItems(c *gin.Context) {\r\n+    playlistID := c.Query(\"playlistID\")\r\n+    data, err := cps.drivenAdapter.GetYouTubePlaylistItems(context.Background(), playlistID)\r\n+    cps.responseHandler.HandleResponse(c, data, err, \"/youtube/playlist-items\", \"unknown\")\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleYouTubeLive(c *gin.Context) {\r\n+    data, err := cps.drivenAdapter.GetYouTubeLive(context.Background())\r\n+    cps.responseHandler.HandleResponse(c, data, err, \"/youtube/live\", \"unknown\")\r\n+}\r\n+\r\n+// Funciones de monitorizaci√≥n\r\n+func (cps *ControlPanelService) HandleMonitorLog(c *gin.Context) {\r\n+    var log models.MonitorLog\r\n+    if err := c.BindJSON(&log); err != nil {\r\n+        handler.HandleError(c, err)\r\n+        return\r\n+    }\r\n+    err := cps.drivenAdapter.SaveMonitorLog(context.Background(), log)\r\n+    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/monitor/log\", log.Usuario)\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleListMonitorLogs(c *gin.Context) {\r\n+    logs, err := cps.drivenAdapter.ListMonitorLogs(context.Background())\r\n+    cps.responseHandler.HandleResponse(c, logs, err, \"/internal/monitor/logs\", \"unknown\")\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleReadMonitorLog(c *gin.Context) {\r\n+    filename := c.Param(\"filename\")\r\n+    log, err := cps.drivenAdapter.ReadMonitorLog(context.Background(), filename)\r\n+    cps.responseHandler.HandleResponse(c, log, err, \"/internal/monitor/logs/\"+filename, \"unknown\")\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleDeleteMonitorLog(c *gin.Context) {\r\n+    filename := c.Param(\"filename\")\r\n+    err := cps.drivenAdapter.DeleteMonitorLog(context.Background(), filename)\r\n+    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/monitor/logs/\"+filename, \"unknown\")\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleDeleteAllMonitorLogs(c *gin.Context) {\r\n+    err := cps.drivenAdapter.DeleteAllMonitorLogs(context.Background())\r\n+    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/monitor/logs\", \"unknown\")\r\n+}\r\n+\r\n+// Funciones de logs\r\n+func (cps *ControlPanelService) HandleErrorLog(c *gin.Context) {\r\n+    var log models.ErrorLog\r\n+    if err := c.BindJSON(&log); err != nil {\r\n+        handler.HandleError(c, err)\r\n+        return\r\n+    }\r\n+    err := cps.drivenAdapter.SaveErrorLog(context.Background(), log)\r\n+    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/log/error\", log.Usuario)\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleListLogs(c *gin.Context) {\r\n+    logs, err := cps.drivenAdapter.ListLogs(context.Background())\r\n+    cps.responseHandler.HandleResponse(c, logs, err, \"/internal/logs\", \"unknown\")\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleReadLog(c *gin.Context) {\r\n+    filename := c.Param(\"filename\")\r\n+    log, err := cps.drivenAdapter.ReadLog(context.Background(), filename)\r\n+    cps.responseHandler.HandleResponse(c, log, err, \"/internal/logs/\"+filename, \"unknown\")\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleDeleteLog(c *gin.Context) {\r\n+    filename := c.Param(\"filename\")\r\n+    err := cps.drivenAdapter.DeleteLog(context.Background(), filename)\r\n+    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/logs/\"+filename, \"unknown\")\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleDeleteAllLogs(c *gin.Context) {\r\n+    err := cps.drivenAdapter.DeleteAllLogs(context.Background())\r\n+    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/logs\", \"unknown\")\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleHome(c *gin.Context) {\r\n+    message := \"Welcome to the API\"\r\n+    c.JSON(200, gin.H{\"message\": message})\r\n+}\r\n"
                },
                {
                    "date": 1719214271616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,138 +0,0 @@\n-package main\r\n-\r\n-import (\r\n-    \"context\"\r\n-    \"control-panel/models\"\r\n-    \"github.com/gin-gonic/gin\"\r\n-    \"control-panel/ports/drivens\"\r\n-    \"control-panel/handler\"\r\n-)\r\n-\r\n-type ControlPanelService struct {\r\n-    drivenAdapter    drivens.ControlPanelDrivenPort\r\n-    responseHandler  *handler.ResponseHandler\r\n-}\r\n-\r\n-func NewControlPanelService(drivenAdapter drivens.ControlPanelDrivenPort, responseHandler *handler.ResponseHandler) *ControlPanelService {\r\n-    return &ControlPanelService{\r\n-        drivenAdapter:   drivenAdapter,\r\n-        responseHandler: responseHandler,\r\n-    }\r\n-}\r\n-\r\n-func (cps *ControlPanelService) HandleAuthenticate(c *gin.Context) {\r\n-    var credentials models.Credentials\r\n-    if err := c.BindJSON(&credentials); err != nil {\r\n-        handler.HandleError(c, err)\r\n-        return\r\n-    }\r\n-    token, err := cps.drivenAdapter.Authenticate(context.Background(), credentials)\r\n-    cps.responseHandler.HandleResponse(c, token, err, \"/authenticate\", credentials.Username)\r\n-}\r\n-\r\n-func (cps *ControlPanelService) HandleAuthorize(c *gin.Context) {\r\n-    token := c.GetHeader(\"Authorization\")\r\n-    resource := c.Query(\"resource\")\r\n-    action := c.Query(\"action\")\r\n-    authorized, err := cps.drivenAdapter.Authorize(context.Background(), token, resource, action)\r\n-    cps.responseHandler.HandleResponse(c, authorized, err, \"/authorize\", \"unknown\")\r\n-}\r\n-\r\n-// Funciones de YouTube\r\n-func (cps *ControlPanelService) HandleYouTubeSearching(c *gin.Context) {\r\n-    query := c.Query(\"search\")\r\n-    data, err := cps.drivenAdapter.GetYouTubeSearching(context.Background(), query)\r\n-    cps.responseHandler.HandleResponse(c, data, err, \"/youtube/search\", \"unknown\")\r\n-}\r\n-\r\n-func (cps *ControlPanelService) HandleYouTubeRandomVideo(c *gin.Context) {\r\n-    data, err := cps.drivenAdapter.GetYouTubeRandomVideo(context.Background())\r\n-    cps.responseHandler.HandleResponse(c, data, err, \"/youtube/random\", \"unknown\")\r\n-}\r\n-\r\n-func (cps *ControlPanelService) HandleYouTubePlaylists(c *gin.Context) {\r\n-    data, err := cps.drivenAdapter.GetYouTubePlaylists(context.Background())\r\n-    cps.responseHandler.HandleResponse(c, data, err, \"/youtube/playlists\", \"unknown\")\r\n-}\r\n-\r\n-func (cps *ControlPanelService) HandleYouTubePlaylistItems(c *gin.Context) {\r\n-    playlistID := c.Query(\"playlistID\")\r\n-    data, err := cps.drivenAdapter.GetYouTubePlaylistItems(context.Background(), playlistID)\r\n-    cps.responseHandler.HandleResponse(c, data, err, \"/youtube/playlist-items\", \"unknown\")\r\n-}\r\n-\r\n-func (cps *ControlPanelService) HandleYouTubeLive(c *gin.Context) {\r\n-    data, err := cps.drivenAdapter.GetYouTubeLive(context.Background())\r\n-    cps.responseHandler.HandleResponse(c, data, err, \"/youtube/live\", \"unknown\")\r\n-}\r\n-\r\n-// Funciones de monitorizaci√≥n\r\n-func (cps *ControlPanelService) HandleMonitorLog(c *gin.Context) {\r\n-    var log models.MonitorLog\r\n-    if err := c.BindJSON(&log); err != nil {\r\n-        handler.HandleError(c, err)\r\n-        return\r\n-    }\r\n-    err := cps.drivenAdapter.SaveMonitorLog(context.Background(), log)\r\n-    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/monitor/log\", log.Usuario)\r\n-}\r\n-\r\n-func (cps *ControlPanelService) HandleListMonitorLogs(c *gin.Context) {\r\n-    logs, err := cps.drivenAdapter.ListMonitorLogs(context.Background())\r\n-    cps.responseHandler.HandleResponse(c, logs, err, \"/internal/monitor/logs\", \"unknown\")\r\n-}\r\n-\r\n-func (cps *ControlPanelService) HandleReadMonitorLog(c *gin.Context) {\r\n-    filename := c.Param(\"filename\")\r\n-    log, err := cps.drivenAdapter.ReadMonitorLog(context.Background(), filename)\r\n-    cps.responseHandler.HandleResponse(c, log, err, \"/internal/monitor/logs/\"+filename, \"unknown\")\r\n-}\r\n-\r\n-func (cps *ControlPanelService) HandleDeleteMonitorLog(c *gin.Context) {\r\n-    filename := c.Param(\"filename\")\r\n-    err := cps.drivenAdapter.DeleteMonitorLog(context.Background(), filename)\r\n-    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/monitor/logs/\"+filename, \"unknown\")\r\n-}\r\n-\r\n-func (cps *ControlPanelService) HandleDeleteAllMonitorLogs(c *gin.Context) {\r\n-    err := cps.drivenAdapter.DeleteAllMonitorLogs(context.Background())\r\n-    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/monitor/logs\", \"unknown\")\r\n-}\r\n-\r\n-// Funciones de logs\r\n-func (cps *ControlPanelService) HandleErrorLog(c *gin.Context) {\r\n-    var log models.ErrorLog\r\n-    if err := c.BindJSON(&log); err != nil {\r\n-        handler.HandleError(c, err)\r\n-        return\r\n-    }\r\n-    err := cps.drivenAdapter.SaveErrorLog(context.Background(), log)\r\n-    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/log/error\", log.Usuario)\r\n-}\r\n-\r\n-func (cps *ControlPanelService) HandleListLogs(c *gin.Context) {\r\n-    logs, err := cps.drivenAdapter.ListLogs(context.Background())\r\n-    cps.responseHandler.HandleResponse(c, logs, err, \"/internal/logs\", \"unknown\")\r\n-}\r\n-\r\n-func (cps *ControlPanelService) HandleReadLog(c *gin.Context) {\r\n-    filename := c.Param(\"filename\")\r\n-    log, err := cps.drivenAdapter.ReadLog(context.Background(), filename)\r\n-    cps.responseHandler.HandleResponse(c, log, err, \"/internal/logs/\"+filename, \"unknown\")\r\n-}\r\n-\r\n-func (cps *ControlPanelService) HandleDeleteLog(c *gin.Context) {\r\n-    filename := c.Param(\"filename\")\r\n-    err := cps.drivenAdapter.DeleteLog(context.Background(), filename)\r\n-    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/logs/\"+filename, \"unknown\")\r\n-}\r\n-\r\n-func (cps *ControlPanelService) HandleDeleteAllLogs(c *gin.Context) {\r\n-    err := cps.drivenAdapter.DeleteAllLogs(context.Background())\r\n-    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/logs\", \"unknown\")\r\n-}\r\n-\r\n-func (cps *ControlPanelService) HandleHome(c *gin.Context) {\r\n-    message := \"Welcome to the API\"\r\n-    c.JSON(200, gin.H{\"message\": message})\r\n-}\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719214299729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,138 @@\n+package main\r\n+\r\n+import (\r\n+    \"context\"\r\n+    \"control-panel/models\"\r\n+    \"github.com/gin-gonic/gin\"\r\n+    \"control-panel/ports/drivens\"\r\n+    \"control-panel/handler\"\r\n+)\r\n+\r\n+type ControlPanelService struct {\r\n+    drivenAdapter    drivens.ControlPanelDrivenPort\r\n+    responseHandler  *handler.ResponseHandler\r\n+}\r\n+\r\n+func NewControlPanelService(drivenAdapter drivens.ControlPanelDrivenPort, responseHandler *handler.ResponseHandler) *ControlPanelService {\r\n+    return &ControlPanelService{\r\n+        drivenAdapter:   drivenAdapter,\r\n+        responseHandler: responseHandler,\r\n+    }\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleAuthenticate(c *gin.Context) {\r\n+    var credentials models.Credentials\r\n+    if err := c.BindJSON(&credentials); err != nil {\r\n+        handler.HandleError(c, err)\r\n+        return\r\n+    }\r\n+    token, err := cps.drivenAdapter.Authenticate(context.Background(), credentials)\r\n+    cps.responseHandler.HandleResponse(c, token, err, \"/authenticate\", credentials.Username)\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleAuthorize(c *gin.Context) {\r\n+    token := c.GetHeader(\"Authorization\")\r\n+    resource := c.Query(\"resource\")\r\n+    action := c.Query(\"action\")\r\n+    authorized, err := cps.drivenAdapter.Authorize(context.Background(), token, resource, action)\r\n+    cps.responseHandler.HandleResponse(c, authorized, err, \"/authorize\", \"unknown\")\r\n+}\r\n+\r\n+// Funciones de YouTube\r\n+func (cps *ControlPanelService) HandleYouTubeSearching(c *gin.Context) {\r\n+    query := c.Query(\"search\")\r\n+    data, err := cps.drivenAdapter.GetYouTubeSearching(context.Background(), query)\r\n+    cps.responseHandler.HandleResponse(c, data, err, \"/youtube/search\", \"unknown\")\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleYouTubeRandomVideo(c *gin.Context) {\r\n+    data, err := cps.drivenAdapter.GetYouTubeRandomVideo(context.Background())\r\n+    cps.responseHandler.HandleResponse(c, data, err, \"/youtube/random\", \"unknown\")\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleYouTubePlaylists(c *gin.Context) {\r\n+    data, err := cps.drivenAdapter.GetYouTubePlaylists(context.Background())\r\n+    cps.responseHandler.HandleResponse(c, data, err, \"/youtube/playlists\", \"unknown\")\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleYouTubePlaylistItems(c *gin.Context) {\r\n+    playlistID := c.Query(\"playlistID\")\r\n+    data, err := cps.drivenAdapter.GetYouTubePlaylistItems(context.Background(), playlistID)\r\n+    cps.responseHandler.HandleResponse(c, data, err, \"/youtube/playlist-items\", \"unknown\")\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleYouTubeLive(c *gin.Context) {\r\n+    data, err := cps.drivenAdapter.GetYouTubeLive(context.Background())\r\n+    cps.responseHandler.HandleResponse(c, data, err, \"/youtube/live\", \"unknown\")\r\n+}\r\n+\r\n+// Funciones de monitorizaci√≥n\r\n+func (cps *ControlPanelService) HandleMonitorLog(c *gin.Context) {\r\n+    var log models.MonitorLog\r\n+    if err := c.BindJSON(&log); err != nil {\r\n+        handler.HandleError(c, err)\r\n+        return\r\n+    }\r\n+    err := cps.drivenAdapter.SaveMonitorLog(context.Background(), log)\r\n+    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/monitor/log\", log.Usuario)\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleListMonitorLogs(c *gin.Context) {\r\n+    logs, err := cps.drivenAdapter.ListMonitorLogs(context.Background())\r\n+    cps.responseHandler.HandleResponse(c, logs, err, \"/internal/monitor/logs\", \"unknown\")\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleReadMonitorLog(c *gin.Context) {\r\n+    filename := c.Param(\"filename\")\r\n+    log, err := cps.drivenAdapter.ReadMonitorLog(context.Background(), filename)\r\n+    cps.responseHandler.HandleResponse(c, log, err, \"/internal/monitor/logs/\"+filename, \"unknown\")\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleDeleteMonitorLog(c *gin.Context) {\r\n+    filename := c.Param(\"filename\")\r\n+    err := cps.drivenAdapter.DeleteMonitorLog(context.Background(), filename)\r\n+    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/monitor/logs/\"+filename, \"unknown\")\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleDeleteAllMonitorLogs(c *gin.Context) {\r\n+    err := cps.drivenAdapter.DeleteAllMonitorLogs(context.Background())\r\n+    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/monitor/logs\", \"unknown\")\r\n+}\r\n+\r\n+// Funciones de logs\r\n+func (cps *ControlPanelService) HandleErrorLog(c *gin.Context) {\r\n+    var log models.ErrorLog\r\n+    if err := c.BindJSON(&log); err != nil {\r\n+        handler.HandleError(c, err)\r\n+        return\r\n+    }\r\n+    err := cps.drivenAdapter.SaveErrorLog(context.Background(), log)\r\n+    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/log/error\", log.Usuario)\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleListLogs(c *gin.Context) {\r\n+    logs, err := cps.drivenAdapter.ListLogs(context.Background())\r\n+    cps.responseHandler.HandleResponse(c, logs, err, \"/internal/logs\", \"unknown\")\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleReadLog(c *gin.Context) {\r\n+    filename := c.Param(\"filename\")\r\n+    log, err := cps.drivenAdapter.ReadLog(context.Background(), filename)\r\n+    cps.responseHandler.HandleResponse(c, log, err, \"/internal/logs/\"+filename, \"unknown\")\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleDeleteLog(c *gin.Context) {\r\n+    filename := c.Param(\"filename\")\r\n+    err := cps.drivenAdapter.DeleteLog(context.Background(), filename)\r\n+    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/logs/\"+filename, \"unknown\")\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleDeleteAllLogs(c *gin.Context) {\r\n+    err := cps.drivenAdapter.DeleteAllLogs(context.Background())\r\n+    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/logs\", \"unknown\")\r\n+}\r\n+\r\n+func (cps *ControlPanelService) HandleHome(c *gin.Context) {\r\n+    message := \"Welcome to the API\"\r\n+    c.JSON(200, gin.H{\"message\": message})\r\n+}\r\n"
                }
            ],
            "date": 1719194080971,
            "name": "Commit-0",
            "content": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"github.com/gin-gonic/gin\"\r\n    \"control-panel/adapters/drivers\"\r\n    \"control-panel/adapters/drivens\"\r\n    \"control-panel/ports/drivers\"\r\n    \"control-panel/ports/drivens\"\r\n    \"control-panel/models\"\r\n    \"control-panel/handler\"\r\n)\r\n\r\nvar drivenAdapter drivens.DrivenAdapterPort = drivens.NewDrivenAdapter()\r\nvar controlPanelAdapter drivers.ControlPanelPort = drivers.NewControlPanelAdapter(drivenAdapter)\r\n\r\nfunc ExampleEndpoint(c *gin.Context) {\r\n    var input models.ExampleModel\r\n    if err := c.BindJSON(&input); err != nil {\r\n        handler.HandleError(c, err)\r\n        return\r\n    }\r\n\r\n    result, err := controlPanelAdapter.ExampleFunction(context.Background(), input.Data)\r\n    if err != nil {\r\n        handler.HandleError(c, err)\r\n        return\r\n    }\r\n\r\n    c.JSON(http.StatusOK, gin.H{\"result\": result})\r\n}\r\n"
        }
    ]
}