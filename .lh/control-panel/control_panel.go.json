{
    "sourceFile": "control-panel/control_panel.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1719217348130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719217358048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,11 +2,11 @@\n \r\n import (\r\n     \"context\"\r\n     \"github.com/gin-gonic/gin\"\r\n-    \"control-panel/models\"\r\n-    \"control-panel/ports/drivens\"\r\n-    \"control-panel/handler\"\r\n+    \"hexagonal-servercontrol-panel/models\"\r\n+    \"hexagonal-servercontrol-panel/ports/drivens\"\r\n+    \"hexagonal-servercontrol-panel/handler\"\r\n )\r\n \r\n type ControlPanelService struct {\r\n     drivenAdapter    drivens.ControlPanelDrivenPort\r\n"
                },
                {
                    "date": 1719217849169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-package main\r\n+package \r\n \r\n import (\r\n     \"context\"\r\n     \"github.com/gin-gonic/gin\"\r\n"
                },
                {
                    "date": 1719217855203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-package control\r\n+package control_panel\r\n \r\n import (\r\n     \"context\"\r\n     \"github.com/gin-gonic/gin\"\r\n"
                },
                {
                    "date": 1719217975253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-package control_panel\r\n+package control-panel\r\n \r\n import (\r\n     \"context\"\r\n     \"github.com/gin-gonic/gin\"\r\n"
                }
            ],
            "date": 1719217348130,
            "name": "Commit-0",
            "content": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"github.com/gin-gonic/gin\"\r\n    \"control-panel/models\"\r\n    \"control-panel/ports/drivens\"\r\n    \"control-panel/handler\"\r\n)\r\n\r\ntype ControlPanelService struct {\r\n    drivenAdapter    drivens.ControlPanelDrivenPort\r\n    responseHandler  *handler.ResponseHandler\r\n}\r\n\r\nfunc NewControlPanelService(drivenAdapter drivens.ControlPanelDrivenPort, responseHandler *handler.ResponseHandler) *ControlPanelService {\r\n    return &ControlPanelService{\r\n        drivenAdapter:   drivenAdapter,\r\n        responseHandler: responseHandler,\r\n    }\r\n}\r\n\r\nfunc (cps *ControlPanelService) HandleAuthenticate(c *gin.Context) {\r\n    var credentials models.Credentials\r\n    if err := c.BindJSON(&credentials); err != nil {\r\n        handler.HandleError(c, err)\r\n        return\r\n    }\r\n    token, err := cps.drivenAdapter.Authenticate(context.Background(), credentials)\r\n    cps.responseHandler.HandleResponse(c, token, err, \"/authenticate\", credentials.Username)\r\n}\r\n\r\nfunc (cps *ControlPanelService) HandleAuthorize(c *gin.Context) {\r\n    token := c.GetHeader(\"Authorization\")\r\n    resource := c.Query(\"resource\")\r\n    action := c.Query(\"action\")\r\n    authorized, err := cps.drivenAdapter.Authorize(context.Background(), token, resource, action)\r\n    cps.responseHandler.HandleResponse(c, authorized, err, \"/authorize\", \"unknown\")\r\n}\r\n\r\n// Funciones de YouTube\r\nfunc (cps *ControlPanelService) HandleYouTubeSearching(c *gin.Context) {\r\n    query := c.Query(\"search\")\r\n    data, err := cps.drivenAdapter.GetYouTubeSearching(context.Background(), query)\r\n    cps.responseHandler.HandleResponse(c, data, err, \"/youtube/search\", \"unknown\")\r\n}\r\n\r\nfunc (cps *ControlPanelService) HandleYouTubeRandomVideo(c *gin.Context) {\r\n    data, err := cps.drivenAdapter.GetYouTubeRandomVideo(context.Background())\r\n    cps.responseHandler.HandleResponse(c, data, err, \"/youtube/random\", \"unknown\")\r\n}\r\n\r\nfunc (cps *ControlPanelService) HandleYouTubePlaylists(c *gin.Context) {\r\n    data, err := cps.drivenAdapter.GetYouTubePlaylists(context.Background())\r\n    cps.responseHandler.HandleResponse(c, data, err, \"/youtube/playlists\", \"unknown\")\r\n}\r\n\r\nfunc (cps *ControlPanelService) HandleYouTubePlaylistItems(c *gin.Context) {\r\n    playlistID := c.Query(\"playlistID\")\r\n    data, err := cps.drivenAdapter.GetYouTubePlaylistItems(context.Background(), playlistID)\r\n    cps.responseHandler.HandleResponse(c, data, err, \"/youtube/playlist-items\", \"unknown\")\r\n}\r\n\r\nfunc (cps *ControlPanelService) HandleYouTubeLive(c *gin.Context) {\r\n    data, err := cps.drivenAdapter.GetYouTubeLive(context.Background())\r\n    cps.responseHandler.HandleResponse(c, data, err, \"/youtube/live\", \"unknown\")\r\n}\r\n\r\n// Funciones de monitorizaci√≥n\r\nfunc (cps *ControlPanelService) HandleMonitorLog(c *gin.Context) {\r\n    var log models.MonitorLog\r\n    if err := c.BindJSON(&log); err != nil {\r\n        handler.HandleError(c, err)\r\n        return\r\n    }\r\n    err := cps.drivenAdapter.SaveMonitorLog(context.Background(), log)\r\n    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/monitor/log\", log.Usuario)\r\n}\r\n\r\nfunc (cps *ControlPanelService) HandleListMonitorLogs(c *gin.Context) {\r\n    logs, err := cps.drivenAdapter.ListMonitorLogs(context.Background())\r\n    cps.responseHandler.HandleResponse(c, logs, err, \"/internal/monitor/logs\", \"unknown\")\r\n}\r\n\r\nfunc (cps *ControlPanelService) HandleReadMonitorLog(c *gin.Context) {\r\n    filename := c.Param(\"filename\")\r\n    log, err := cps.drivenAdapter.ReadMonitorLog(context.Background(), filename)\r\n    cps.responseHandler.HandleResponse(c, log, err, \"/internal/monitor/logs/\"+filename, \"unknown\")\r\n}\r\n\r\nfunc (cps *ControlPanelService) HandleDeleteMonitorLog(c *gin.Context) {\r\n    filename := c.Param(\"filename\")\r\n    err := cps.drivenAdapter.DeleteMonitorLog(context.Background(), filename)\r\n    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/monitor/logs/\"+filename, \"unknown\")\r\n}\r\n\r\nfunc (cps *ControlPanelService) HandleDeleteAllMonitorLogs(c *gin.Context) {\r\n    err := cps.drivenAdapter.DeleteAllMonitorLogs(context.Background())\r\n    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/monitor/logs\", \"unknown\")\r\n}\r\n\r\n// Funciones de logs\r\nfunc (cps *ControlPanelService) HandleErrorLog(c *gin.Context) {\r\n    var log models.ErrorLog\r\n    if err := c.BindJSON(&log); err != nil {\r\n        handler.HandleError(c, err)\r\n        return\r\n    }\r\n    err := cps.drivenAdapter.SaveErrorLog(context.Background(), log)\r\n    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/log/error\", log.Usuario)\r\n}\r\n\r\nfunc (cps *ControlPanelService) HandleListLogs(c *gin.Context) {\r\n    logs, err := cps.drivenAdapter.ListLogs(context.Background())\r\n    cps.responseHandler.HandleResponse(c, logs, err, \"/internal/logs\", \"unknown\")\r\n}\r\n\r\nfunc (cps *ControlPanelService) HandleReadLog(c *gin.Context) {\r\n    filename := c.Param(\"filename\")\r\n    log, err := cps.drivenAdapter.ReadLog(context.Background(), filename)\r\n    cps.responseHandler.HandleResponse(c, log, err, \"/internal/logs/\"+filename, \"unknown\")\r\n}\r\n\r\nfunc (cps *ControlPanelService) HandleDeleteLog(c *gin.Context) {\r\n    filename := c.Param(\"filename\")\r\n    err := cps.drivenAdapter.DeleteLog(context.Background(), filename)\r\n    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/logs/\"+filename, \"unknown\")\r\n}\r\n\r\nfunc (cps *ControlPanelService) HandleDeleteAllLogs(c *gin.Context) {\r\n    err := cps.drivenAdapter.DeleteAllLogs(context.Background())\r\n    cps.responseHandler.HandleResponse(c, nil, err, \"/internal/logs\", \"unknown\")\r\n}\r\n\r\nfunc (cps *ControlPanelService) HandleHome(c *gin.Context) {\r\n    message := \"Welcome to the API\"\r\n    c.JSON(200, gin.H{\"message\": message})\r\n}\r\n"
        }
    ]
}