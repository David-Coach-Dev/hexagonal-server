{
    "sourceFile": "authentication-api/util/jwt_util.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1719211375968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719212660220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,45 +0,0 @@\n-package utils\r\n-\r\n-import (\r\n-    \"time\"\r\n-    \"github.com/dgrijalva/jwt-go\"\r\n-)\r\n-\r\n-type JWTUtil struct {\r\n-    secretKey string\r\n-}\r\n-\r\n-func NewJWTUtil(secretKey string) *JWTUtil {\r\n-    return &JWTUtil{\r\n-        secretKey: secretKey,\r\n-    }\r\n-}\r\n-\r\n-func (ju *JWTUtil) GenerateJWT(username string) (string, error) {\r\n-    claims := jwt.MapClaims{\r\n-        \"username\": username,\r\n-        \"exp\":      time.Now().Add(time.Hour * 72).Unix(), // El token expira en 72 horas\r\n-    }\r\n-\r\n-    token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\r\n-    return token.SignedString([]byte(ju.secretKey))\r\n-}\r\n-\r\n-func (ju *JWTUtil) ValidateJWT(tokenString string) (*jwt.Token, error) {\r\n-    token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\r\n-        if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {\r\n-            return nil, jwt.ErrSignatureInvalid\r\n-        }\r\n-        return []byte(ju.secretKey), nil\r\n-    })\r\n-\r\n-    if err != nil {\r\n-        return nil, err\r\n-    }\r\n-\r\n-    if !token.Valid {\r\n-        return nil, jwt.ErrSignatureInvalid\r\n-    }\r\n-\r\n-    return token, nil\r\n-}\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719213621493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,45 +0,0 @@\n-package utils\r\n-\r\n-import (\r\n-    \"time\"\r\n-    \"github.com/dgrijalva/jwt-go\"\r\n-)\r\n-\r\n-type JWTUtil struct {\r\n-    secretKey string\r\n-}\r\n-\r\n-func NewJWTUtil(secretKey string) *JWTUtil {\r\n-    return &JWTUtil{\r\n-        secretKey: secretKey,\r\n-    }\r\n-}\r\n-\r\n-func (ju *JWTUtil) GenerateJWT(username string) (string, error) {\r\n-    claims := jwt.MapClaims{\r\n-        \"username\": username,\r\n-        \"exp\":      time.Now().Add(time.Hour * 72).Unix(), // El token expira en 72 horas\r\n-    }\r\n-\r\n-    token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\r\n-    return token.SignedString([]byte(ju.secretKey))\r\n-}\r\n-\r\n-func (ju *JWTUtil) ValidateJWT(tokenString string) (*jwt.Token, error) {\r\n-    token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\r\n-        if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {\r\n-            return nil, jwt.ErrSignatureInvalid\r\n-        }\r\n-        return []byte(ju.secretKey), nil\r\n-    })\r\n-\r\n-    if err != nil {\r\n-        return nil, err\r\n-    }\r\n-\r\n-    if !token.Valid {\r\n-        return nil, jwt.ErrSignatureInvalid\r\n-    }\r\n-\r\n-    return token, nil\r\n-}\r\n\\ No newline at end of file\n"
                }
            ],
            "date": 1719211375968,
            "name": "Commit-0",
            "content": "package utils\r\n\r\nimport (\r\n    \"time\"\r\n    \"github.com/dgrijalva/jwt-go\"\r\n)\r\n\r\ntype JWTUtil struct {\r\n    secretKey string\r\n}\r\n\r\nfunc NewJWTUtil(secretKey string) *JWTUtil {\r\n    return &JWTUtil{\r\n        secretKey: secretKey,\r\n    }\r\n}\r\n\r\nfunc (ju *JWTUtil) GenerateJWT(username string) (string, error) {\r\n    claims := jwt.MapClaims{\r\n        \"username\": username,\r\n        \"exp\":      time.Now().Add(time.Hour * 72).Unix(), // El token expira en 72 horas\r\n    }\r\n\r\n    token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\r\n    return token.SignedString([]byte(ju.secretKey))\r\n}\r\n\r\nfunc (ju *JWTUtil) ValidateJWT(tokenString string) (*jwt.Token, error) {\r\n    token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\r\n        if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {\r\n            return nil, jwt.ErrSignatureInvalid\r\n        }\r\n        return []byte(ju.secretKey), nil\r\n    })\r\n\r\n    if err != nil {\r\n        return nil, err\r\n    }\r\n\r\n    if !token.Valid {\r\n        return nil, jwt.ErrSignatureInvalid\r\n    }\r\n\r\n    return token, nil\r\n}\r\n"
        }
    ]
}