{
    "sourceFile": "authentication-api/adapters/drivens/authentication_driven_adapter.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1719211396785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719212471286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,19 @@\n     \"encoding/json\"\r\n     \"io/ioutil\"\r\n )\r\n \r\n+type User struct {\r\n+    Avatar    string `json:\"avatar\"`\r\n+    Name      string `json:\"name\"`\r\n+    Lastname  string `json:\"lastname\"`\r\n+    User      string `json:\"user\"`\r\n+    Password  string `json:\"password\"`\r\n+    Rol       string `json:\"rol\"`\r\n+}\r\n+\r\n type AuthenticationAdapter struct {\r\n-    users    map[string]string\r\n+    users    map[string]User\r\n     jwtUtil  *utils.JWTUtil\r\n }\r\n \r\n func NewAuthenticationAdapter() *AuthenticationAdapter {\r\n@@ -30,9 +39,9 @@\n }\r\n \r\n func (aa *AuthenticationAdapter) Authenticate(ctx context.Context, credentials models.Credentials) (string, error) {\r\n     // Verificar si el usuario y la contraseña son válidos\r\n-    if password, ok := aa.users[credentials.Username]; ok && password == credentials.Password {\r\n+    if user, ok := aa.users[credentials.Username]; ok && user.Password == credentials.Password {\r\n         // Generar un JWT\r\n         token, err := aa.jwtUtil.GenerateJWT(credentials.Username)\r\n         if err != nil {\r\n             return \"\", err\r\n@@ -41,17 +50,22 @@\n     }\r\n     return \"\", errors.New(\"invalid credentials\")\r\n }\r\n \r\n-func loadMockUsers(filename string) (map[string]string, error) {\r\n+func loadMockUsers(filename string) (map[string]User, error) {\r\n     data, err := ioutil.ReadFile(filename)\r\n     if err != nil {\r\n         return nil, err\r\n     }\r\n \r\n-    var users map[string]string\r\n+    var users []User\r\n     if err := json.Unmarshal(data, &users); err != nil {\r\n         return nil, err\r\n     }\r\n \r\n-    return users, nil\r\n+    userMap := make(map[string]User)\r\n+    for _, user := range users {\r\n+        userMap[user.User] = user\r\n+    }\r\n+\r\n+    return userMap, nil\r\n }\r\n"
                },
                {
                    "date": 1719213547018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,71 +0,0 @@\n-package drivens\r\n-\r\n-import (\r\n-    \"context\"\r\n-    \"errors\"\r\n-    \"authentication-api/models\"\r\n-    \"authentication-api/utils\"\r\n-    \"encoding/json\"\r\n-    \"io/ioutil\"\r\n-)\r\n-\r\n-type User struct {\r\n-    Avatar    string `json:\"avatar\"`\r\n-    Name      string `json:\"name\"`\r\n-    Lastname  string `json:\"lastname\"`\r\n-    User      string `json:\"user\"`\r\n-    Password  string `json:\"password\"`\r\n-    Rol       string `json:\"rol\"`\r\n-}\r\n-\r\n-type AuthenticationAdapter struct {\r\n-    users    map[string]User\r\n-    jwtUtil  *utils.JWTUtil\r\n-}\r\n-\r\n-func NewAuthenticationAdapter() *AuthenticationAdapter {\r\n-    // Cargar usuarios desde un archivo mock\r\n-    users, err := loadMockUsers(\"users_mock.json\")\r\n-    if err != nil {\r\n-        panic(err)\r\n-    }\r\n-\r\n-    jwtUtil := utils.NewJWTUtil(\"your_secret_key\")\r\n-\r\n-    return &AuthenticationAdapter{\r\n-        users:   users,\r\n-        jwtUtil: jwtUtil,\r\n-    }\r\n-}\r\n-\r\n-func (aa *AuthenticationAdapter) Authenticate(ctx context.Context, credentials models.Credentials) (string, error) {\r\n-    // Verificar si el usuario y la contraseña son válidos\r\n-    if user, ok := aa.users[credentials.Username]; ok && user.Password == credentials.Password {\r\n-        // Generar un JWT\r\n-        token, err := aa.jwtUtil.GenerateJWT(credentials.Username)\r\n-        if err != nil {\r\n-            return \"\", err\r\n-        }\r\n-        return token, nil\r\n-    }\r\n-    return \"\", errors.New(\"invalid credentials\")\r\n-}\r\n-\r\n-func loadMockUsers(filename string) (map[string]User, error) {\r\n-    data, err := ioutil.ReadFile(filename)\r\n-    if err != nil {\r\n-        return nil, err\r\n-    }\r\n-\r\n-    var users []User\r\n-    if err := json.Unmarshal(data, &users); err != nil {\r\n-        return nil, err\r\n-    }\r\n-\r\n-    userMap := make(map[string]User)\r\n-    for _, user := range users {\r\n-        userMap[user.User] = user\r\n-    }\r\n-\r\n-    return userMap, nil\r\n-}\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719216116056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-package drivens\r\n+package a\r\n \r\n import (\r\n     \"context\"\r\n     \"errors\"\r\n"
                },
                {
                    "date": 1719217045559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-package adapters\r\n+package \r\n \r\n import (\r\n     \"context\"\r\n     \"errors\"\r\n"
                }
            ],
            "date": 1719211396785,
            "name": "Commit-0",
            "content": "package drivens\r\n\r\nimport (\r\n    \"context\"\r\n    \"errors\"\r\n    \"authentication-api/models\"\r\n    \"authentication-api/utils\"\r\n    \"encoding/json\"\r\n    \"io/ioutil\"\r\n)\r\n\r\ntype AuthenticationAdapter struct {\r\n    users    map[string]string\r\n    jwtUtil  *utils.JWTUtil\r\n}\r\n\r\nfunc NewAuthenticationAdapter() *AuthenticationAdapter {\r\n    // Cargar usuarios desde un archivo mock\r\n    users, err := loadMockUsers(\"users_mock.json\")\r\n    if err != nil {\r\n        panic(err)\r\n    }\r\n\r\n    jwtUtil := utils.NewJWTUtil(\"your_secret_key\")\r\n\r\n    return &AuthenticationAdapter{\r\n        users:   users,\r\n        jwtUtil: jwtUtil,\r\n    }\r\n}\r\n\r\nfunc (aa *AuthenticationAdapter) Authenticate(ctx context.Context, credentials models.Credentials) (string, error) {\r\n    // Verificar si el usuario y la contraseña son válidos\r\n    if password, ok := aa.users[credentials.Username]; ok && password == credentials.Password {\r\n        // Generar un JWT\r\n        token, err := aa.jwtUtil.GenerateJWT(credentials.Username)\r\n        if err != nil {\r\n            return \"\", err\r\n        }\r\n        return token, nil\r\n    }\r\n    return \"\", errors.New(\"invalid credentials\")\r\n}\r\n\r\nfunc loadMockUsers(filename string) (map[string]string, error) {\r\n    data, err := ioutil.ReadFile(filename)\r\n    if err != nil {\r\n        return nil, err\r\n    }\r\n\r\n    var users map[string]string\r\n    if err := json.Unmarshal(data, &users); err != nil {\r\n        return nil, err\r\n    }\r\n\r\n    return users, nil\r\n}\r\n"
        }
    ]
}